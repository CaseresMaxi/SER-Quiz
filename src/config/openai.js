import OpenAI from "openai";
import * as pdfjsLib from "pdfjs-dist";
import {
  AI_CONFIG,
  getSystemPrompt,
  getFormattedInstructions,
  getModelConfig,
  getQuestionsCount,
  getEvaluationSystemPrompt,
} from "./aiSettings";
import {
  ENV_CONFIG,
  debugLog,
  apiLog,
  errorLog,
  isDevelopment,
} from "./environment";
import { diagnosePdfFile, logPdfDiagnosis } from "../utils/pdfDiagnostic";

// Configurar worker de PDF.js para Vite con manejo de errores mejorado
try {
  pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;
  debugLog("‚úÖ PDF.js worker configurado correctamente");
} catch (error) {
  errorLog("‚ùå Error configurando PDF.js worker:", error);
}

// Inicializar cliente de OpenAI con configuraci√≥n de entorno
const DEFAULT_API_KEY = ENV_CONFIG.OPENAI_API_KEY;

// Funci√≥n para crear cliente OpenAI con API key
const createOpenAIClient = (apiKey = null) => {
  const effectiveApiKey = apiKey || DEFAULT_API_KEY;

  if (!effectiveApiKey) {
    errorLog("No se ha configurado una API key de OpenAI");
    throw new Error(
      "API key de OpenAI no configurada. Config√∫rala en el archivo .env o en la interfaz de usuario."
    );
  }

  apiLog(
    "Creando cliente OpenAI con API key:",
    effectiveApiKey.substring(0, 8) + "..."
  );

  return new OpenAI({
    apiKey: effectiveApiKey,
    dangerouslyAllowBrowser: true, // Permite usar en el navegador
  });
};

// Cliente OpenAI por defecto (si hay API key configurada)
export const openai = DEFAULT_API_KEY ? createOpenAIClient() : null;

// Function to generate questions with automatic PDF Assistant detection
export async function generateQuestionsWithSmartDetection(
  files,
  customApiKey = null,
  questionType = "choice",
  aiConfig = null
) {
  // Auto-detect if we should use Assistants for PDFs
  const hasPdfFiles = files.some(
    (file) =>
      file.type === "application/pdf" ||
      file.name.toLowerCase().endsWith(".pdf")
  );

  // Use Assistants API for PDFs by default for better quality and native PDF support
  const useAssistants = hasPdfFiles;

  return await generateQuestionsFromFiles(
    files,
    customApiKey,
    questionType,
    aiConfig,
    useAssistants
  );
}

// Function to generate questions with AI
export async function generateQuestionsFromFiles(
  files,
  customApiKey = null,
  questionType = "choice",
  aiConfig = null, // Nuevo par√°metro para configuraciones de IA
  useAssistants = false // Nuevo par√°metro para usar Assistants API
) {
  try {
    // Use custom API key if provided, otherwise use default
    const effectiveApiKey = customApiKey || DEFAULT_API_KEY;

    apiLog(
      `üöÄ Generando preguntas con ${
        questionType === "development" ? "desarrollo" : "opci√≥n m√∫ltiple"
      } ${useAssistants ? "(usando Assistants API)" : "(m√©todo tradicional)"}`
    );
    debugLog("Configuraci√≥n AI:", {
      effectiveApiKey: effectiveApiKey?.substring(0, 8) + "...",
      questionType,
      aiConfig,
      useAssistants,
    });

    // Create OpenAI client with the appropriate API key
    const openaiClient = createOpenAIClient(effectiveApiKey);

    // Check if we should use Assistants API for PDFs
    const hasPdfFiles = files.some(
      (file) =>
        file.type === "application/pdf" ||
        file.name.toLowerCase().endsWith(".pdf")
    );

    if (useAssistants && hasPdfFiles) {
      // Use new Assistants API flow for PDFs
      return await generateQuestionsWithAssistants(
        files,
        openaiClient,
        questionType,
        aiConfig
      );
    }

    // Original flow for other files or when Assistants is disabled
    // Validate files before processing
    const validFiles = files.filter((file) => {
      if (file.size > AI_CONFIG.maxFileSize) {
        console.warn(
          `Archivo ${file.name} es demasiado grande (${(
            file.size /
            1024 /
            1024
          ).toFixed(1)}MB)`
        );
        return false;
      }
      return true;
    });

    if (validFiles.length === 0) {
      throw new Error("No hay archivos v√°lidos para procesar");
    }

    // Process files and extract content
    const fileContents = await processFiles(validFiles);

    // Validate content quality before sending to API
    const contentValidation = validateContentForAPI(fileContents);

    if (!contentValidation.isValid) {
      // Don't waste API tokens on invalid content
      throw new Error(contentValidation.errorMessage);
    }

    debugLog(
      `‚úÖ Contenido validado para API: ${contentValidation.totalUsableContent} caracteres √∫tiles`
    );

    // Create prompt for question generation based on question type
    const prompt = createQuestionGenerationPrompt(
      fileContents,
      questionType,
      aiConfig
    );

    // Get model configuration
    const modelConfig = getModelConfig();

    // Call OpenAI with the appropriate client
    const response = await openaiClient.chat.completions.create({
      model: modelConfig.model,
      messages: [
        {
          role: "system",
          content: getSystemPrompt(questionType),
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      max_tokens: modelConfig.max_tokens,
      temperature: modelConfig.temperature,
    });

    // Process response and convert to app format
    const questions = parseQuestionsFromResponse(
      response.choices[0].message.content,
      questionType
    );

    return questions;
  } catch (error) {
    console.error("Error generating questions with OpenAI:", error);

    // Specific OpenAI error handling
    if (error.message.includes("API key")) {
      throw new Error("API key de OpenAI inv√°lida. Verifica tu configuraci√≥n.");
    } else if (error.message.includes("quota")) {
      throw new Error("Has excedido tu cuota de OpenAI. Verifica tu cuenta.");
    } else if (error.message.includes("rate limit")) {
      throw new Error(
        "L√≠mite de velocidad excedido. Intenta de nuevo en unos minutos."
      );
    }

    throw new Error(`Error al generar preguntas: ${error.message}`);
  }
}

// Function to generate questions using OpenAI Assistants API
async function generateQuestionsWithAssistants(
  files,
  openaiClient,
  questionType,
  aiConfig
) {
  try {
    apiLog("üì§ Subiendo archivos a OpenAI...");

    // Step 1: Upload files to OpenAI
    const uploadedFiles = [];
    for (const file of files) {
      if (
        file.type === "application/pdf" ||
        file.name.toLowerCase().endsWith(".pdf")
      ) {
        debugLog(`üîÑ Subiendo PDF: ${file.name}`);
        const uploadedFile = await uploadFileToOpenAI(openaiClient, file);
        uploadedFiles.push(uploadedFile);
      } else {
        debugLog(`‚è≠Ô∏è  Saltando archivo no-PDF: ${file.name}`);
        // For non-PDF files, we could still process them traditionally
        // or convert them to text and upload as text files
      }
    }

    if (uploadedFiles.length === 0) {
      throw new Error("No se pudieron subir archivos PDF para procesamiento");
    }

    apiLog(`‚úÖ ${uploadedFiles.length} archivo(s) subido(s) exitosamente`);

    // Step 2: Create or get Assistant
    const assistantId = await createQuestionGeneratorAssistant(
      openaiClient,
      questionType,
      aiConfig
    );

    // Step 3: Create thread and process with Assistant
    const questions = await processFilesWithAssistant(
      openaiClient,
      assistantId,
      uploadedFiles,
      questionType,
      aiConfig
    );

    // Step 4: Clean up uploaded files (optional but recommended)
    await cleanupUploadedFiles(openaiClient, uploadedFiles);

    return questions;
  } catch (error) {
    errorLog("‚ùå Error en generaci√≥n con Assistants:", error);
    throw new Error(`Error usando Assistants API: ${error.message}`);
  }
}

// Function to upload a file to OpenAI
async function uploadFileToOpenAI(openaiClient, file) {
  try {
    debugLog(
      `üì§ Subiendo archivo: ${file.name} (${(file.size / 1024 / 1024).toFixed(
        2
      )}MB)`
    );

    // Check file size limits (512MB max for Assistants)
    const maxSize = 512 * 1024 * 1024; // 512MB
    if (file.size > maxSize) {
      throw new Error(
        `Archivo ${file.name} es demasiado grande (${(
          file.size /
          1024 /
          1024
        ).toFixed(2)}MB). M√°ximo permitido: 512MB`
      );
    }

    // Convert File to the format expected by OpenAI
    const formData = new FormData();
    formData.append("file", file);
    formData.append("purpose", "assistants");

    // Use fetch directly for file upload (OpenAI client doesn't handle FormData well)
    const response = await fetch("https://api.openai.com/v1/files", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${openaiClient.apiKey}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        `Error subiendo archivo: ${response.status} - ${
          errorData.error?.message || "Error desconocido"
        }`
      );
    }

    const uploadResult = await response.json();
    debugLog(`‚úÖ Archivo subido: ${uploadResult.id}`);

    return {
      id: uploadResult.id,
      filename: uploadResult.filename,
      originalFile: file,
    };
  } catch (error) {
    errorLog(`‚ùå Error subiendo archivo ${file.name}:`, error);
    throw error;
  }
}

// Function to create or get a question generator assistant
async function createQuestionGeneratorAssistant(
  openaiClient,
  questionType,
  aiConfig
) {
  try {
    apiLog("ü§ñ Creando Assistant para generaci√≥n de preguntas...");

    const modelConfig = getModelConfig();
    const systemPrompt = getSystemPrompt(questionType);

    const assistant = await openaiClient.beta.assistants.create({
      name: `Generador de Preguntas ${
        questionType === "development" ? "Desarrollo" : "Opci√≥n M√∫ltiple"
      }`,
      instructions: `${systemPrompt}

CONTEXTO ADICIONAL:
Eres un asistente especializado en generar preguntas educativas de alta calidad bas√°ndote en documentos PDF proporcionados por el usuario. Tu objetivo es crear preguntas que eval√∫en la comprensi√≥n profunda del material.

REGLAS ESPEC√çFICAS:
1. Analiza completamente los documentos PDF proporcionados
2. Basa todas las preguntas √öNICAMENTE en el contenido de los documentos
3. NO agregues informaci√≥n externa o conocimiento general
4. Mant√©n el nivel acad√©mico apropiado (universitario)
5. Aseg√∫rate de que las preguntas sean claras y precisas
6. Incluye contexto suficiente en cada pregunta para que sea autocontenida

IMPORTANTE: Siempre responde con formato JSON v√°lido sin texto adicional antes o despu√©s.`,
      model: modelConfig.model,
      tools: [
        { type: "file_search" }, // Enable file search for PDFs
      ],
    });

    debugLog(`‚úÖ Assistant creado: ${assistant.id}`);
    return assistant.id;
  } catch (error) {
    errorLog("‚ùå Error creando Assistant:", error);
    throw new Error(`Error creando Assistant: ${error.message}`);
  }
}

// Function to process files with the Assistant
async function processFilesWithAssistant(
  openaiClient,
  assistantId,
  uploadedFiles,
  questionType,
  aiConfig
) {
  try {
    apiLog("üßµ Creando thread y procesando con Assistant...");

    // Step 1: Create a thread
    const thread = await openaiClient.beta.threads.create();
    debugLog(`‚úÖ Thread creado: ${thread.id}`);

    // Step 2: Create the prompt for question generation
    const fileIds = uploadedFiles.map((f) => f.id);
    const questionsToGenerate = getQuestionsCount(questionType);

    const promptMessage = createAssistantPrompt(
      questionType,
      questionsToGenerate,
      aiConfig
    );

    // Step 3: Add message to thread with file attachments
    await openaiClient.beta.threads.messages.create(thread.id, {
      role: "user",
      content: promptMessage,
      attachments: fileIds.map((fileId) => ({
        file_id: fileId,
        tools: [{ type: "file_search" }],
      })),
    });

    debugLog("üì® Mensaje enviado al Assistant con archivos adjuntos");

    // Step 4: Run the assistant
    const run = await openaiClient.beta.threads.runs.create(thread.id, {
      assistant_id: assistantId,
    });

    debugLog(`üèÉ Run iniciado: ${run.id}`);

    // Step 5: Wait for completion with optimized polling
    let runStatus = run;
    let attempts = 0;
    const maxAttempts = 30; // Reduced from 60 to 30 (2.5 minutes max)
    let pollInterval = 2000; // Start with 2 seconds
    const maxPollInterval = 10000; // Max 10 seconds between polls

    while (runStatus.status !== "completed" && attempts < maxAttempts) {
      // Use exponential backoff for polling
      await new Promise((resolve) => setTimeout(resolve, pollInterval));

      try {
        runStatus = await openaiClient.beta.threads.runs.retrieve(
          thread.id,
          run.id
        );
        attempts++;

        debugLog(
          `üîÑ Status del run: ${
            runStatus.status
          } (${attempts}/${maxAttempts}) - Polling cada ${pollInterval / 1000}s`
        );

        // Handle different statuses
        if (runStatus.status === "failed") {
          throw new Error(
            `Assistant run fall√≥: ${
              runStatus.last_error?.message || "Error desconocido"
            }`
          );
        }

        if (runStatus.status === "requires_action") {
          debugLog(
            "‚ö†Ô∏è  Run requiere acci√≥n - esto no deber√≠a ocurrir en este flujo"
          );
        }

        if (runStatus.status === "expired") {
          throw new Error("Assistant run expir√≥ - timeout del servidor");
        }

        // Exponential backoff: increase interval for longer-running tasks
        if (attempts > 10) {
          pollInterval = Math.min(pollInterval * 1.2, maxPollInterval);
        }
      } catch (pollError) {
        // If polling fails, wait a bit longer and retry
        debugLog(`‚ö†Ô∏è  Error en polling, reintentando...: ${pollError.message}`);
        await new Promise((resolve) => setTimeout(resolve, 3000));
        continue;
      }
    }

    if (runStatus.status !== "completed") {
      throw new Error("Timeout: El Assistant tard√≥ demasiado en responder");
    }

    // Step 6: Get the response
    const messages = await openaiClient.beta.threads.messages.list(thread.id);
    const assistantMessage = messages.data.find(
      (msg) => msg.role === "assistant"
    );

    if (!assistantMessage || !assistantMessage.content[0]) {
      throw new Error("No se recibi√≥ respuesta del Assistant");
    }

    const responseContent = assistantMessage.content[0].text.value;
    debugLog("‚úÖ Respuesta recibida del Assistant");

    // Step 7: Parse and return questions
    const questions = parseQuestionsFromResponse(responseContent, questionType);

    // Step 8: Clean up thread
    try {
      await openaiClient.beta.threads.del(thread.id);
      debugLog("üßπ Thread eliminado");
    } catch (cleanupError) {
      debugLog("‚ö†Ô∏è  No se pudo eliminar el thread:", cleanupError.message);
    }

    return questions;
  } catch (error) {
    errorLog("‚ùå Error procesando con Assistant:", error);
    throw error;
  }
}

// Function to create prompt for Assistant
function createAssistantPrompt(questionType, questionsToGenerate, aiConfig) {
  const basePrompt = `Analiza los documentos PDF adjuntos y genera exactamente ${questionsToGenerate} preguntas de ${
    questionType === "development" ? "desarrollo" : "opci√≥n m√∫ltiple"
  } en espa√±ol sobre los TEMAS TRATADOS.

INSTRUCCIONES CR√çTICAS TEM√ÅTICAS:
1. Genera preguntas sobre los TEMAS TRATADOS en los PDFs, NO sobre el contenido per se
2. Enf√≥cate en CONCEPTOS, TEOR√çAS y PRINCIPIOS derivados del an√°lisis de los documentos
3. Las preguntas deben ser TEM√ÅTICAS, autocontenidas y con contexto conceptual suficiente
4. Eval√∫a comprensi√≥n tem√°tica profunda, no memorizaci√≥n de contenido textual
5. Responde √öNICAMENTE con JSON v√°lido sin texto adicional

${
  questionType === "development"
    ? `FORMATO PARA PREGUNTAS DE DESARROLLO TEM√ÅTICAS:
[
  {
    "question": "Considerando el concepto de [tema espec√≠fico], desarrolla y analiza [qu√© se espera sobre el tema]...",
    "options": ["Aspectos tem√°ticos clave", "Conceptos fundamentales", "Principios te√≥ricos"],
    "correct": ["Respuestas tem√°ticas esperadas", "Conceptos clave"],
    "suggestedAnswer": "Respuesta detallada de 200-400 palabras que demuestra comprensi√≥n tem√°tica profunda y an√°lisis conceptual",
    "source": "Generado de: nombre_archivo.pdf"
  }
]`
    : `FORMATO PARA PREGUNTAS DE OPCI√ìN M√öLTIPLE TEM√ÅTICAS EXIGENTES:

REQUISITOS OBLIGATORIOS TEM√ÅTICOS:
- Nivel universitario avanzado que eval√∫e comprensi√≥n conceptual profunda
- 40% preguntas con UNA respuesta correcta, 60% preguntas con M√öLTIPLES respuestas correctas
- Opciones incorrectas PLAUSIBLES tem√°ticamente que requieran conocimiento conceptual profundo
- Preguntas que eval√∫en AN√ÅLISIS CR√çTICO, S√çNTESIS tem√°tica y APLICACI√ìN de teor√≠as
- Combinaci√≥n de m√∫ltiples conceptos tem√°ticos en situaciones anal√≠ticas complejas
- JAM√ÅS preguntas sobre contenido textual, referencias o memorizaci√≥n simple

[
  {
    "question": "En el contexto del tema [concepto complejo con m√∫ltiples elementos], considerando [situaci√≥n tem√°tica desafiante], ¬øcu√°l/cu√°les [pregunta que requiera an√°lisis conceptual profundo]?",
    "options": ["Opci√≥n A - Distractor tem√°tico plausible", "Opci√≥n B - Correcta conceptualmente", "Opci√≥n C - Correcta te√≥ricamente", "Opci√≥n D - Distractor conceptual convincente"],
    "correct": ["Opci√≥n B - Correcta conceptualmente", "Opci√≥n C - Correcta te√≥ricamente"],
    "suggestedAnswer": "Explicaci√≥n detallada del an√°lisis conceptual requerido para identificar por qu√© estas opciones son correctas, demostrando comprensi√≥n tem√°tica profunda",
    "source": "Generado de: nombre_archivo.pdf"
  }
]`
}

Genera exactamente ${questionsToGenerate} preguntas tem√°ticas derivadas del an√°lisis de los PDFs adjuntos.`;

  return basePrompt;
}

// Function to clean up uploaded files
async function cleanupUploadedFiles(openaiClient, uploadedFiles) {
  try {
    apiLog("üßπ Limpiando archivos subidos...");

    for (const file of uploadedFiles) {
      try {
        await openaiClient.files.del(file.id);
        debugLog(`üóëÔ∏è  Archivo eliminado: ${file.filename}`);
      } catch (error) {
        debugLog(
          `‚ö†Ô∏è  No se pudo eliminar archivo ${file.filename}:`,
          error.message
        );
      }
    }

    debugLog("‚úÖ Limpieza de archivos completada");
  } catch (error) {
    debugLog("‚ö†Ô∏è  Error en limpieza de archivos:", error.message);
  }
}

// Funci√≥n para procesar archivos y extraer contenido con mejor logging
async function processFiles(files) {
  debugLog(`üìÇ Procesando ${files.length} archivo(s)...`);
  const contents = [];

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    debugLog(
      `üîÑ Procesando archivo ${i + 1}/${files.length}: ${file.name} (${
        file.type
      })`
    );

    try {
      let content = "";

      if (file.type.startsWith("text/")) {
        debugLog(`üìù Procesando archivo de texto: ${file.name}`);
        content = await readTextFile(file);
        debugLog(`‚úÖ Archivo de texto procesado: ${content.length} caracteres`);
      } else if (
        file.type === "application/pdf" ||
        file.name.toLowerCase().endsWith(".pdf")
      ) {
        debugLog(`üìÑ Procesando archivo PDF: ${file.name}`);

        // Diagnosticar PDF antes del procesamiento
        const diagnosis = diagnosePdfFile(file);
        logPdfDiagnosis(diagnosis);

        if (!diagnosis.canProcess) {
          throw new Error(
            `PDF no se puede procesar: ${diagnosis.issues
              .map((i) => i.message)
              .join(", ")}`
          );
        }

        content = await readPdfFile(file);
        debugLog(`‚úÖ PDF procesado: ${content.length} caracteres`);
      } else if (file.type.startsWith("image/")) {
        debugLog(`üñºÔ∏è  Archivo de imagen detectado: ${file.name}`);
        content = `[Imagen: ${file.name} - ${(file.size / 1024).toFixed(
          1
        )}KB]\nNota: El contenido de im√°genes se puede procesar con GPT-4 Vision en futuras versiones.`;
      } else if (
        file.type.includes("csv") ||
        file.name.toLowerCase().endsWith(".csv")
      ) {
        debugLog(`üìä Procesando archivo CSV: ${file.name}`);
        content = await readTextFile(file);
        debugLog(`‚úÖ CSV procesado: ${content.length} caracteres`);
      } else if (file.name.toLowerCase().endsWith(".txt")) {
        debugLog(`üìÑ Procesando archivo TXT: ${file.name}`);
        content = await readTextFile(file);
        debugLog(`‚úÖ TXT procesado: ${content.length} caracteres`);
      } else {
        debugLog(
          `‚ùì Tipo de archivo no reconocido: ${file.name} (${file.type})`
        );
        content = `[Archivo: ${file.name} - ${(file.size / 1024).toFixed(
          1
        )}KB]\nTipo: ${
          file.type
        }\nNota: Contenido no procesable directamente, pero puede contener informaci√≥n relevante.`;
      }

      // Verificar que se extrajo contenido √∫til
      const contentLength = content.trim().length;
      if (contentLength < 10) {
        debugLog(
          `‚ö†Ô∏è  Archivo con muy poco contenido: ${file.name} (${contentLength} caracteres)`
        );
      }

      contents.push({
        filename: file.name,
        type: file.type,
        content: content,
        size: file.size,
        processedSuccessfully: !content.includes("[Error al procesar"),
        contentLength: contentLength,
      });

      debugLog(`üìã Archivo agregado al procesamiento: ${file.name}`);
    } catch (error) {
      errorLog(`‚ùå Error procesando archivo ${file.name}:`, {
        fileName: file.name,
        fileType: file.type,
        fileSize: file.size,
        error: error.message,
      });

      contents.push({
        filename: file.name,
        type: file.type,
        content:
          `[‚ùå Error al procesar archivo: ${file.name}]\n\n` +
          `üîç Detalles del error: ${error.message}\n\n` +
          `üí° Posibles soluciones:\n` +
          `- Verifica que el archivo no est√© corrupto\n` +
          `- Intenta con un archivo m√°s peque√±o\n` +
          `- Verifica el formato del archivo\n` +
          `- Contacta soporte si el problema persiste`,
        size: file.size,
        processedSuccessfully: false,
        contentLength: 0,
      });
    }
  }

  // Resumen del procesamiento
  const successfulFiles = contents.filter(
    (c) => c.processedSuccessfully
  ).length;
  const totalContentLength = contents.reduce(
    (sum, c) => sum + c.contentLength,
    0
  );

  debugLog(`üìä Resumen del procesamiento:`);
  debugLog(
    `  - Archivos procesados exitosamente: ${successfulFiles}/${files.length}`
  );
  debugLog(`  - Contenido total extra√≠do: ${totalContentLength} caracteres`);
  debugLog(`  - Archivos con errores: ${files.length - successfulFiles}`);

  if (successfulFiles === 0) {
    errorLog("‚ùå No se pudo procesar ning√∫n archivo correctamente");
  } else if (totalContentLength < 100) {
    debugLog("‚ö†Ô∏è  Muy poco contenido extra√≠do de los archivos");
  }

  return contents;
}

// Funci√≥n para validar que el contenido es apto para enviar a la API
function validateContentForAPI(fileContents) {
  debugLog("üîç Validando contenido para env√≠o a API...");

  const validation = {
    isValid: false,
    totalUsableContent: 0,
    processedFiles: 0,
    failedFiles: 0,
    issues: [],
    errorMessage: "",
    suggestions: [],
  };

  let usableText = "";
  let hasAnyValidContent = false;

  for (const fileContent of fileContents) {
    debugLog(`üîé Analizando: ${fileContent.filename}`);

    // Verificar si el archivo se proces√≥ exitosamente
    if (!fileContent.processedSuccessfully) {
      validation.failedFiles++;
      validation.issues.push({
        file: fileContent.filename,
        issue: "No se pudo procesar el archivo",
        type: "error",
      });
      continue;
    }

    // Extraer texto √∫til (sin mensajes de error o advertencias)
    const content = fileContent.content;

    // Filtrar contenido que NO es √∫til para la API
    if (
      content.includes("[Error al procesar") ||
      content.includes("[‚ùå Error") ||
      content.includes("[‚ö†Ô∏è  PDF procesado pero con muy poco texto extra√≠ble]")
    ) {
      validation.failedFiles++;
      validation.issues.push({
        file: fileContent.filename,
        issue: "Archivo con errores o sin texto extra√≠ble",
        type: "content_error",
      });

      // Extraer informaci√≥n espec√≠fica del error
      if (content.includes("PDF escaneado")) {
        validation.suggestions.push(
          "El PDF parece ser escaneado - usa un PDF con texto seleccionable o aplica OCR"
        );
      }
      if (content.includes("protegido con contrase√±a")) {
        validation.suggestions.push(
          "El PDF est√° protegido - desbloqu√©alo antes de subirlo"
        );
      }
      if (content.includes("demasiado grande")) {
        validation.suggestions.push(
          "El PDF es demasiado grande - reduce su tama√±o o aumenta VITE_MAX_FILE_SIZE"
        );
      }

      continue;
    }

    // Extraer solo el texto real (sin metadatos de procesamiento)
    let cleanContent = content;

    // Remover metadatos de procesamiento pero conservar el texto real
    cleanContent = cleanContent
      .replace(/\[üìä Resumen:.*?\]/gs, "")
      .replace(/\[üìà Estad√≠sticas:.*?\]/gs, "")
      .replace(/--- P√°gina \d+ ---/g, "")
      .replace(/\[Sin texto extra√≠ble.*?\]/g, "")
      .replace(/\[Nota:.*?\]/g, "")
      .trim();

    if (cleanContent.length > 50) {
      // M√≠nimo 50 caracteres de contenido real
      usableText += cleanContent + "\n\n";
      hasAnyValidContent = true;
      validation.processedFiles++;

      debugLog(
        `‚úÖ ${fileContent.filename}: ${cleanContent.length} caracteres √∫tiles`
      );
    } else {
      validation.failedFiles++;
      validation.issues.push({
        file: fileContent.filename,
        issue: `Muy poco contenido √∫til (${cleanContent.length} caracteres)`,
        type: "insufficient_content",
      });

      validation.suggestions.push(
        `${fileContent.filename}: Verifica que el archivo contenga texto seleccionable`
      );
    }
  }

  validation.totalUsableContent = usableText.trim().length;

  // Determinar si es v√°lido para enviar a la API
  if (!hasAnyValidContent || validation.totalUsableContent < 100) {
    validation.isValid = false;

    // Crear mensaje de error elegante y espec√≠fico
    validation.errorMessage = createUserFriendlyErrorMessage(validation);
  } else {
    validation.isValid = true;
    debugLog(
      `‚úÖ Validaci√≥n exitosa: ${validation.processedFiles} archivos procesados, ${validation.totalUsableContent} caracteres √∫tiles`
    );
  }

  return validation;
}

// Funci√≥n para crear mensaje de error elegante para el usuario
function createUserFriendlyErrorMessage(validation) {
  let message = "üö´ No se puede generar el cuestionario\n\n";

  // T√≠tulo espec√≠fico seg√∫n el problema principal
  if (validation.failedFiles === validation.issues.length) {
    message += "‚ùå No se pudo procesar ning√∫n archivo correctamente.\n\n";
  } else {
    message +=
      "‚ö†Ô∏è  Los archivos no contienen suficiente contenido √∫til para generar preguntas.\n\n";
  }

  // Detalles de problemas encontrados
  message += "üîç PROBLEMAS DETECTADOS:\n";

  const errorsByType = {};
  validation.issues.forEach((issue) => {
    if (!errorsByType[issue.type]) {
      errorsByType[issue.type] = [];
    }
    errorsByType[issue.type].push(issue);
  });

  // Agrupar errores similares
  if (errorsByType.content_error) {
    message += `üìÑ Archivos con problemas de procesamiento: ${errorsByType.content_error.length}\n`;
    errorsByType.content_error.forEach((issue) => {
      message += `   ‚Ä¢ ${issue.file}: ${issue.issue}\n`;
    });
  }

  if (errorsByType.insufficient_content) {
    message += `üìù Archivos con poco contenido: ${errorsByType.insufficient_content.length}\n`;
    errorsByType.insufficient_content.forEach((issue) => {
      message += `   ‚Ä¢ ${issue.file}: ${issue.issue}\n`;
    });
  }

  if (errorsByType.error) {
    message += `üí• Archivos con errores: ${errorsByType.error.length}\n`;
    errorsByType.error.forEach((issue) => {
      message += `   ‚Ä¢ ${issue.file}: ${issue.issue}\n`;
    });
  }

  // Sugerencias espec√≠ficas
  if (validation.suggestions.length > 0) {
    message += "\nüí° SOLUCIONES RECOMENDADAS:\n";
    const uniqueSuggestions = [...new Set(validation.suggestions)];
    uniqueSuggestions.forEach((suggestion) => {
      message += `   ‚Ä¢ ${suggestion}\n`;
    });
  }

  // Sugerencias generales
  message += "\nüõ†Ô∏è  ACCIONES SUGERIDAS:\n";
  message +=
    "   ‚Ä¢ Verifica que los PDFs contengan texto seleccionable (no sean escaneados)\n";
  message +=
    "   ‚Ä¢ Aseg√∫rate de que los archivos no est√©n protegidos con contrase√±a\n";
  message += "   ‚Ä¢ Prueba con archivos m√°s peque√±os (menos de 10MB)\n";
  message += "   ‚Ä¢ Consulta 'PDF_TROUBLESHOOTING.md' para gu√≠a detallada\n";
  message += "   ‚Ä¢ Revisa la consola del navegador (F12) para logs t√©cnicos\n";

  // Informaci√≥n adicional
  message += "\nüìä ESTAD√çSTICAS:\n";
  message += `   ‚Ä¢ Total de archivos: ${
    validation.processedFiles + validation.failedFiles
  }\n`;
  message += `   ‚Ä¢ Archivos procesados: ${validation.processedFiles}\n`;
  message += `   ‚Ä¢ Archivos con errores: ${validation.failedFiles}\n`;
  message += `   ‚Ä¢ Contenido √∫til extra√≠do: ${validation.totalUsableContent} caracteres\n`;

  return message;
}

// Funci√≥n para leer archivos de texto
function readTextFile(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => resolve(e.target.result);
    reader.onerror = (e) => reject(e);
    reader.readAsText(file);
  });
}

// Funci√≥n para leer archivos PDF con manejo de errores mejorado
async function readPdfFile(file) {
  debugLog(
    `üìÑ Procesando PDF: ${file.name} (${(file.size / 1024 / 1024).toFixed(
      2
    )}MB)`
  );

  try {
    // Validaciones previas
    if (!file || file.size === 0) {
      throw new Error("Archivo PDF vac√≠o o inv√°lido");
    }

    if (file.size > ENV_CONFIG.MAX_FILE_SIZE) {
      throw new Error(
        `Archivo demasiado grande: ${(file.size / 1024 / 1024).toFixed(
          2
        )}MB (m√°ximo: ${ENV_CONFIG.MAX_FILE_SIZE / 1024 / 1024}MB)`
      );
    }

    // Verificar que sea realmente un PDF
    if (
      !file.type.includes("pdf") &&
      !file.name.toLowerCase().endsWith(".pdf")
    ) {
      throw new Error("El archivo no parece ser un PDF v√°lido");
    }

    debugLog(`üîÑ Convirtiendo PDF a ArrayBuffer...`);
    const arrayBuffer = await file.arrayBuffer();

    if (!arrayBuffer || arrayBuffer.byteLength === 0) {
      throw new Error("No se pudo leer el contenido del archivo PDF");
    }

    debugLog(`üìñ Cargando documento PDF con PDF.js...`);
    const pdf = await pdfjsLib.getDocument({
      data: arrayBuffer,
      // Configuraciones adicionales para mejor compatibilidad
      verbosity: isDevelopment()
        ? pdfjsLib.VerbosityLevel.WARNINGS
        : pdfjsLib.VerbosityLevel.ERRORS,
      isEvalSupported: false, // Seguridad
      disableFontFace: false, // Permitir fuentes para mejor extracci√≥n
      useSystemFonts: true,
    }).promise;

    if (!pdf) {
      throw new Error("No se pudo cargar el documento PDF");
    }

    let fullText = "";
    const numPages = pdf.numPages;
    debugLog(`üìä PDF cargado: ${numPages} p√°ginas`);

    // Usar configuraci√≥n personalizable para l√≠mite de p√°ginas
    const maxPages = Math.min(numPages, AI_CONFIG.maxPdfPages);
    debugLog(`üî¢ Procesando ${maxPages} de ${numPages} p√°ginas`);

    // Procesar p√°ginas con mejor manejo de errores
    let successfulPages = 0;
    let failedPages = 0;

    for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
      try {
        debugLog(`üìë Procesando p√°gina ${pageNum}/${maxPages}...`);

        const page = await pdf.getPage(pageNum);
        if (!page) {
          errorLog(`‚ùå No se pudo obtener la p√°gina ${pageNum}`);
          failedPages++;
          continue;
        }

        const textContent = await page.getTextContent();
        if (!textContent || !textContent.items) {
          debugLog(`‚ö†Ô∏è  P√°gina ${pageNum} sin contenido de texto extra√≠ble`);
          fullText += `\n--- P√°gina ${pageNum} ---\n[Sin texto extra√≠ble]\n`;
          continue;
        }

        // Extraer texto con mejor formateo
        const pageText = textContent.items
          .map((item) => {
            if (item && item.str) {
              return item.str.trim();
            }
            return "";
          })
          .filter((text) => text.length > 0)
          .join(" ");

        if (pageText.length > 0) {
          fullText += `\n--- P√°gina ${pageNum} ---\n${pageText}\n`;
          successfulPages++;
          debugLog(
            `‚úÖ P√°gina ${pageNum} procesada: ${pageText.length} caracteres`
          );
        } else {
          fullText += `\n--- P√°gina ${pageNum} ---\n[Sin texto extra√≠ble en esta p√°gina]\n`;
          debugLog(`‚ö†Ô∏è  P√°gina ${pageNum} sin texto extra√≠ble`);
        }
      } catch (pageError) {
        errorLog(`‚ùå Error procesando p√°gina ${pageNum}:`, pageError);
        fullText += `\n--- P√°gina ${pageNum} ---\n[Error al procesar p√°gina: ${pageError.message}]\n`;
        failedPages++;
      }
    }

    // Agregar informaci√≥n adicional
    if (numPages > AI_CONFIG.maxPdfPages) {
      fullText += `\n[üìä Resumen: PDF tiene ${numPages} p√°ginas, se procesaron las primeras ${AI_CONFIG.maxPdfPages} p√°ginas]`;
    }

    fullText += `\n[üìà Estad√≠sticas: ${successfulPages} p√°ginas exitosas, ${failedPages} p√°ginas con errores]`;

    // Verificar si se extrajo algo de texto
    const extractedText = fullText.trim();
    if (!extractedText || extractedText.length < 50) {
      const warningMsg =
        `[‚ö†Ô∏è  PDF procesado pero con muy poco texto extra√≠ble: ${file.name}]\n` +
        `Posibles causas:\n` +
        `- PDF escaneado (imagen) sin OCR\n` +
        `- PDF protegido o con restricciones\n` +
        `- PDF con formato complejo\n` +
        `- Fuentes no est√°ndar\n\n` +
        `Texto extra√≠do (${extractedText.length} caracteres):\n${extractedText}`;

      debugLog("‚ö†Ô∏è  PDF con poco texto extra√≠ble:", {
        fileName: file.name,
        extractedLength: extractedText.length,
        successfulPages,
        failedPages,
      });

      return warningMsg;
    }

    debugLog(
      `üéâ PDF procesado exitosamente: ${extractedText.length} caracteres extra√≠dos`
    );
    return extractedText;
  } catch (error) {
    errorLog("‚ùå Error leyendo PDF:", {
      fileName: file.name,
      fileSize: file.size,
      fileType: file.type,
      error: error.message,
      stack: error.stack,
    });

    // Mensajes de error m√°s espec√≠ficos
    let errorMessage = `[‚ùå Error al leer PDF: ${file.name}]\n\n`;

    if (error.message.includes("Invalid PDF")) {
      errorMessage += `üîç Diagn√≥stico: El archivo no es un PDF v√°lido o est√° corrupto.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Verifica que el archivo sea un PDF real\n`;
      errorMessage += `- Intenta abrir el PDF en otro visor para verificar que funciona\n`;
      errorMessage += `- El archivo podr√≠a estar da√±ado\n`;
    } else if (error.message.includes("Password")) {
      errorMessage += `üîí Diagn√≥stico: El PDF est√° protegido con contrase√±a.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Desbloquea el PDF antes de subirlo\n`;
      errorMessage += `- Usa un PDF sin protecci√≥n\n`;
    } else if (error.message.includes("demasiado grande")) {
      errorMessage += `üì¶ Diagn√≥stico: El archivo supera el l√≠mite de tama√±o.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Reduce el tama√±o del PDF\n`;
      errorMessage += `- Divide el PDF en partes m√°s peque√±as\n`;
      errorMessage += `- Aumenta VITE_MAX_FILE_SIZE en tu .env\n`;
    } else if (error.message.includes("Worker")) {
      errorMessage += `‚öôÔ∏è  Diagn√≥stico: Error en el procesador PDF de la aplicaci√≥n.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Recarga la p√°gina e intenta de nuevo\n`;
      errorMessage += `- Verifica tu conexi√≥n a internet\n`;
      errorMessage += `- El archivo podr√≠a tener un formato no compatible\n`;
    } else {
      errorMessage += `üîç Diagn√≥stico: Error t√©cnico durante el procesamiento.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Intenta con otro archivo PDF\n`;
      errorMessage += `- Verifica que el PDF se abra correctamente en otros programas\n`;
      errorMessage += `- Contacta soporte si el problema persiste\n`;
    }

    errorMessage += `\nüìã Detalles t√©cnicos: ${error.message}`;

    return errorMessage;
  }
}

// Funci√≥n para crear el prompt de generaci√≥n de preguntas
function createQuestionGenerationPrompt(fileContents, questionType, aiConfig) {
  const filesInfo = fileContents
    .map(
      (f) =>
        `Archivo: ${f.filename}\nTipo: ${f.type}\nTama√±o: ${(
          f.size / 1024
        ).toFixed(1)}KB\nContenido:\n${f.content}`
    )
    .join("\n\n---\n\n");

  if (questionType === "development") {
    // Prompt espec√≠fico para preguntas a desarrollar
    return `Bas√°ndote EXCLUSIVAMENTE en el siguiente contenido de archivos, genera exactamente ${getQuestionsCount(
      "development"
    )} preguntas a desarrollar de nivel universitario avanzado en espa√±ol.

CONTENIDO DE ARCHIVOS:
${filesInfo}

REGLAS CR√çTICAS - DEBES SEGUIRLAS ESTRICTAMENTE:
1. Las preguntas deben ser sobre los TEMAS TRATADOS en el material, NO sobre el contenido per se del material
2. Enf√≥cate en los conceptos, teor√≠as y temas que se abordan en los documentos
3. Las preguntas deben ser sobre el CONOCIMIENTO TEM√ÅTICO que se puede extraer del material
4. NO hagas preguntas sobre c√≥mo el material presenta la informaci√≥n o est√° estructurado
5. NO preguntes sobre el documento en s√≠, sino sobre los temas que contiene
6. Las preguntas deben ser CLARAS y AUTOCONTENIDAS con CONTEXTO SUFICIENTE
7. INCLUYE el CONTEXTO TEM√ÅTICO necesario para entender la pregunta
8. Las preguntas pueden incluir referencias expl√≠citas a temas cuando sea relevante para la comprensi√≥n
9. Evita preguntas vagas sobre "el material" o "el documento" - enf√≥cate en los temas espec√≠ficos
10. Lo que se espera responder debe estar CLARAMENTE explicado en la pregunta
11. Las preguntas deben evaluar comprensi√≥n de los temas, no memorizaci√≥n del contenido textual

CARACTER√çSTICAS DE LAS PREGUNTAS A DESARROLLAR:
- Nivel universitario avanzado enfocado en los TEMAS y CONCEPTOS identificados en el material
- Requieren an√°lisis profundo de los TEMAS TRATADOS, no del material en s√≠
- Apropiadas para evaluar comprensi√≥n tem√°tica y conceptual
- Deben promover la reflexi√≥n sobre los conceptos, teor√≠as y principios abordados
- Cada pregunta debe evaluar comprensi√≥n de los temas de forma clara y directa
- Enf√≥cate en conceptos, relaciones e ideas tem√°ticas derivadas del material
- INCLUYE EL CONTEXTO TEM√ÅTICO: "Considerando el concepto de [tema], desarrolla y analiza..."
- EVITA REFERENCIAS AL MATERIAL: "seg√∫n el documento" o "en el material se dice"

EJEMPLOS DE PREGUNTAS CON ENFOQUE TEM√ÅTICO ADECUADO:
‚úÖ EXCELENTE: "Considerando el proceso de validaci√≥n que incluye tres etapas (verificaci√≥n, an√°lisis y confirmaci√≥n), desarrolla un an√°lisis cr√≠tico de cada etapa explicando su funci√≥n espec√≠fica y c√≥mo se interrelacionan para garantizar la efectividad del proceso."
‚ùå MALO: "Seg√∫n la secci√≥n 4, analiza el proceso de validaci√≥n descrito en el material."

‚úÖ EXCELENTE: "Analiza cr√≠ticamente el modelo de toma de decisiones que integra factores econ√≥micos, sociales y tecnol√≥gicos, explicando c√≥mo estos elementos se complementan y cu√°l es el impacto relativo de cada uno en el proceso decisorio."
‚ùå MALO: "Reflexiona sobre c√≥mo el documento presenta los factores de decisi√≥n."

FORMATO DE RESPUESTA (JSON):
Responde √öNICAMENTE con un array JSON v√°lido en este formato exacto:

[
  {
    "question": "Considerando [contexto tem√°tico espec√≠fico], desarrolla y analiza [qu√© se espera como respuesta sobre el tema]...",
    "options": ["Aspectos tem√°ticos clave", "Conceptos fundamentales del tema", "Principios te√≥ricos relevantes"],
    "correct": ["Respuestas esperadas sobre el tema", "Conceptos clave", "Principios aplicables"],
    "suggestedAnswer": "Respuesta detallada de 200-400 palabras que demuestra comprensi√≥n profunda del tema, analizando conceptos, relaciones y aplicaciones te√≥ricas. Enfocada en el conocimiento tem√°tico, no en el contenido textual.",
    "source": "Generado de: nombre_archivo.ext"
  }
]

IMPORTANTE: 
- Responde SOLO con el JSON, sin texto adicional
- Aseg√∫rate de que el JSON sea v√°lido
- Usa comillas dobles para todas las cadenas
- En "options": incluye aspectos tem√°ticos y conceptuales relevantes
- En "correct": incluye respuestas basadas en la comprensi√≥n tem√°tica
- En "suggestedAnswer": proporciona una respuesta modelo que demuestre comprensi√≥n profunda del tema
- Genera exactamente ${getQuestionsCount("development")} preguntas
- TODA pregunta debe evaluar comprensi√≥n de TEMAS, no memorizaci√≥n de contenido
- Los conceptos preguntados deben derivarse de los temas tratados en los archivos
- Las preguntas deben ser sobre CONOCIMIENTO TEM√ÅTICO, no sobre el material per se
- CADA PREGUNTA debe ser CLARA y AUTOCONTENIDA sobre el tema espec√≠fico
- Las preguntas deben promover an√°lisis de CONCEPTOS y TEOR√çAS, no descripci√≥n del contenido`;
  } else {
    // Prompt original para preguntas de opci√≥n m√∫ltiple
    const instructions = getFormattedInstructions("choice");
    const questionsToGenerate = getQuestionsCount("choice");

    return `Bas√°ndote en el siguiente contenido de archivos, genera exactamente ${questionsToGenerate} preguntas de opci√≥n m√∫ltiple en espa√±ol.

CONTENIDO DE ARCHIVOS:
${filesInfo}

REGLAS ESPEC√çFICAS PARA PREGUNTAS TEM√ÅTICAS EXTREMADAMENTE EXIGENTES:
1. Las preguntas deben ser sobre los TEMAS TRATADOS, no sobre el contenido per se del material
2. Enf√≥cate en CONCEPTOS, TEOR√çAS y PRINCIPIOS derivados del material analizado
3. INCLUYE el CONTEXTO TEM√ÅTICO necesario para comprender la pregunta
4. Las preguntas deben ser CONCRETAS sobre temas espec√≠ficos pero INTELECTUALMENTE DESAFIANTES
5. EVITA preguntas sobre c√≥mo el material presenta la informaci√≥n o est√° estructurado
6. Las preguntas deben evaluar COMPRENSI√ìN TEM√ÅTICA y requerir AN√ÅLISIS PROFUNDO
7. OBLIGATORIO: Genera 40% preguntas de respuesta √∫nica y 60% preguntas de respuestas m√∫ltiples
8. Las opciones incorrectas deben ser PLAUSIBLES tem√°ticamente y requerir conocimiento profundo
9. Las preguntas deben evaluar COMPRENSI√ìN CONCEPTUAL, AN√ÅLISIS CR√çTICO y S√çNTESIS tem√°tica
10. Incluye preguntas que requieran COMPARAR, CONTRASTAR, EVALUAR conceptos y teor√≠as
11. Las preguntas deben combinar m√∫ltiples conceptos tem√°ticos en situaciones complejas
12. JAM√ÅS generes preguntas triviales, sobre referencias textuales o memorizaci√≥n de contenido

EJEMPLOS DE PREGUNTAS TEM√ÅTICAS EXIGENTES:

‚úÖ EXCELENTE (respuesta √∫nica): "En el contexto de sistemas distribuidos que implementan consistencia eventual con estrategias de replicaci√≥n (s√≠ncrona, as√≠ncrona e h√≠brida), ¬øcu√°l es la estrategia m√°s efectiva para minimizar la latencia mientras se mantiene la integridad de datos en escenarios de alta concurrencia?"

‚úÖ EXCELENTE (respuestas m√∫ltiples): "Considerando la arquitectura de microservicios que integra componentes de autenticaci√≥n, autorizaci√≥n, logging, monitoring y service discovery, ¬øcu√°les de los siguientes principios son fundamentales para garantizar TANTO la escalabilidad horizontal COMO la tolerancia a fallos del sistema?"

‚úÖ BUENO (respuesta √∫nica): "En el contexto de algoritmos de cifrado que utilizan m√∫ltiples capas de seguridad (sim√©trica, asim√©trica y hash), ¬øcu√°l es el factor m√°s cr√≠tico para prevenir ataques de fuerza bruta seg√∫n las mejores pr√°cticas de seguridad?"

‚úÖ BUENO (respuestas m√∫ltiples): "En procesos de optimizaci√≥n de bases de datos que involucran indexaci√≥n, particionamiento y cacheo, ¬øcu√°les t√©cnicas son esenciales para mejorar simult√°neamente el rendimiento de consultas Y la integridad referencial?"

‚ùå MALO: "¬øCu√°les son los permisos mencionados en la tabla 3?" (referencia al contenido)
‚ùå MALO: "¬øC√≥mo el material presenta las bases de datos?" (sobre el contenido, no el tema)

INSTRUCCIONES ORIGINALES:
${instructions}

FORMATO DE RESPUESTA (JSON):
Responde √öNICAMENTE con un array JSON v√°lido en este formato exacto:

[
  {
    "question": "En el contexto del tema [concepto o teor√≠a espec√≠fica], ¬øcu√°l/c√≥mo/qu√© [pregunta tem√°tica concreta]?",
    "options": ["Opci√≥n A", "Opci√≥n B", "Opci√≥n C", "Opci√≥n D"],
    "correct": ["Opci√≥n A", "Opci√≥n C"],
    "suggestedAnswer": "Explicaci√≥n detallada de por qu√© estas opciones son correctas bas√°ndose en la comprensi√≥n conceptual y tem√°tica derivada del an√°lisis del material.",
    "source": "Generado de: nombre_archivo.ext"
  }
]

IMPORTANTE - REQUISITOS CR√çTICOS TEM√ÅTICOS: 
- Responde SOLO con el JSON, sin texto adicional
- Aseg√∫rate de que el JSON sea v√°lido
- Usa comillas dobles para todas las cadenas
- Las respuestas correctas deben estar exactamente como aparecen en las opciones
- En "suggestedAnswer": proporciona explicaci√≥n de por qu√© las opciones son correctas bas√°ndose en comprensi√≥n tem√°tica
- Genera exactamente ${questionsToGenerate} preguntas
- Cada pregunta debe tener exactamente ${AI_CONFIG.optionsPerQuestion} opciones
- OBLIGATORIO: 40% preguntas con UNA respuesta correcta, 60% preguntas con M√öLTIPLES respuestas correctas
- TODA pregunta debe ser TEM√ÅTICA y AUTOCONTENIDA sobre conceptos espec√≠ficos
- Las preguntas deben ser EXTREMADAMENTE EXIGENTES y requerir PENSAMIENTO CR√çTICO sobre TEMAS
- Enf√≥cate en COMPRENSI√ìN CONCEPTUAL, no en memorizaci√≥n de contenido textual
- NO generes preguntas sobre referencias textuales, estructuras del documento o contenido per se
- JAM√ÅS generes preguntas triviales - todas deben evaluar comprensi√≥n tem√°tica profunda
- Los distractores deben ser PLAUSIBLES tem√°ticamente y requerir conocimiento conceptual profundo
- Las preguntas deben combinar m√∫ltiples conceptos tem√°ticos y evaluar comprensi√≥n te√≥rica, no memorizaci√≥n`;
  }
}

// Funci√≥n para parsear las preguntas desde la respuesta de OpenAI
function parseQuestionsFromResponse(responseContent, questionType) {
  try {
    // Limpiar la respuesta para extraer solo el JSON
    let jsonString = responseContent.trim();

    // Remover cualquier texto antes o despu√©s del JSON
    const jsonStart = jsonString.indexOf("[");
    const jsonEnd = jsonString.lastIndexOf("]");

    if (jsonStart !== -1 && jsonEnd !== -1) {
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
    }

    // Parsear JSON
    const questions = JSON.parse(jsonString);

    // Validar y agregar IDs
    return questions.map((q, index) => ({
      id: Date.now() + index,
      question: q.question,
      options: q.options,
      correct: q.correct,
      suggestedAnswer: q.suggestedAnswer || "Respuesta sugerida no disponible", // Campo para contexto de IA
      source: q.source || "Generado por IA",
    }));
  } catch (error) {
    console.error("Error parsing questions from OpenAI response:", error);
    console.log("Raw response:", responseContent);

    // Fallback: crear preguntas de ejemplo seg√∫n el tipo
    if (questionType === "development") {
      return [
        {
          id: Date.now(),
          question:
            "Desarrolla un an√°lisis cr√≠tico sobre los conceptos principales presentados en el material. Fundamenta tu respuesta con ejemplos espec√≠ficos y establece relaciones entre las diferentes ideas.",
          options: [
            "Identificaci√≥n de conceptos clave",
            "An√°lisis cr√≠tico y argumentaci√≥n",
            "Uso de ejemplos espec√≠ficos",
            "Establecimiento de relaciones conceptuales",
          ],
          correct: [
            "Demostrar comprensi√≥n profunda de los conceptos principales",
            "Desarrollar argumentos s√≥lidos con evidencia del material",
            "Establecer conexiones l√≥gicas entre ideas",
            "Aplicar pensamiento cr√≠tico en el an√°lisis",
          ],
          suggestedAnswer:
            "Una respuesta completa debe incluir: 1) Identificaci√≥n clara de los conceptos principales presentados en el material, 2) An√°lisis cr√≠tico que eval√∫e la relevancia y aplicabilidad de estos conceptos, 3) Uso de ejemplos espec√≠ficos extra√≠dos del contenido para fundamentar los argumentos, 4) Establecimiento de relaciones l√≥gicas entre las diferentes ideas presentadas, mostrando c√≥mo se conectan y complementan entre s√≠, y 5) Una conclusi√≥n que sintetice el an√°lisis realizado.",
          source: "Pregunta de fallback generada por IA",
        },
        {
          id: Date.now() + 1,
          question:
            "Eval√∫a cr√≠ticamente las metodolog√≠as o enfoques presentados en el contenido. ¬øCu√°les son sus fortalezas y limitaciones? Prop√≥n mejoras o alternativas fundamentadas.",
          options: [
            "Evaluaci√≥n cr√≠tica de metodolog√≠as",
            "Identificaci√≥n de fortalezas y debilidades",
            "Propuesta de mejoras",
            "Fundamentaci√≥n te√≥rica",
          ],
          correct: [
            "An√°lisis objetivo de las metodolog√≠as presentadas",
            "Identificaci√≥n clara de ventajas y desventajas",
            "Propuestas de mejora fundamentadas",
            "Demostraci√≥n de pensamiento cr√≠tico avanzado",
          ],
          suggestedAnswer:
            "La evaluaci√≥n debe comenzar con una descripci√≥n objetiva de las metodolog√≠as presentadas en el material. Luego, analizar sistem√°ticamente sus fortalezas, identificando qu√© aspectos funcionan bien y por qu√©. Seguidamente, examinar las limitaciones o debilidades, explicando los problemas o restricciones encontrados. Finalmente, proponer mejoras espec√≠ficas o alternativas, justificando cada sugerencia con argumentos s√≥lidos basados en el an√°lisis previo y en principios te√≥ricos mencionados en el contenido.",
          source: "Pregunta de fallback generada por IA",
        },
      ];
    } else {
      // Fallback mejorado para preguntas de opci√≥n m√∫ltiple exigentes
      return [
        {
          id: Date.now(),
          question:
            "En el contexto de una arquitectura de microservicios que implementa patrones de Circuit Breaker, Bulkhead y Timeout para garantizar la resiliencia, ¬øcu√°l es el mecanismo m√°s efectivo para mantener la disponibilidad del sistema cuando un servicio cr√≠tico experimenta latencia elevada intermitente?",
          options: [
            "Implementar √∫nicamente Circuit Breaker con umbral fijo",
            "Configurar Circuit Breaker adaptivo con monitoreo de percentiles de latencia",
            "Usar solo timeouts agresivos para forzar respuestas r√°pidas",
            "Aplicar Bulkhead sin restricciones de recursos",
          ],
          correct: [
            "Configurar Circuit Breaker adaptivo con monitoreo de percentiles de latencia",
          ],
          suggestedAnswer:
            "El Circuit Breaker adaptivo con monitoreo de percentiles de latencia es la opci√≥n correcta porque permite detectar patrones de degradaci√≥n del servicio antes de que ocurran fallos completos, ajusta din√°micamente los umbrales bas√°ndose en el comportamiento hist√≥rico del servicio, y proporciona una respuesta m√°s inteligente a las variaciones de rendimiento intermitentes que los enfoques est√°ticos.",
          source: "Pregunta de fallback exigente generada por IA",
        },
        {
          id: Date.now() + 1,
          question:
            "Considerando un sistema distribuido que maneja transacciones financieras con requisitos ACID, ¬øcu√°les de los siguientes enfoques son fundamentales para garantizar TANTO la consistencia de datos COMO el rendimiento √≥ptimo en escenarios de alta concurrencia?",
          options: [
            "Implementar locks optimistas con validaci√≥n de versi√≥n",
            "Usar locks pesimistas en todas las operaciones",
            "Aplicar t√©cnicas de particionamiento horizontal inteligente",
            "Mantener r√©plicas s√≠ncronas en m√∫ltiples zonas geogr√°ficas",
          ],
          correct: [
            "Implementar locks optimistas con validaci√≥n de versi√≥n",
            "Aplicar t√©cnicas de particionamiento horizontal inteligente",
          ],
          suggestedAnswer:
            "Los locks optimistas con validaci√≥n de versi√≥n y el particionamiento horizontal inteligente son correctos porque: 1) Los locks optimistas minimizan el bloqueo de recursos permitiendo mayor concurrencia mientras detectan conflictos mediante versionado, mejorando el rendimiento general. 2) El particionamiento horizontal inteligente distribuye la carga de transacciones reduciendo contenci√≥n y permitiendo procesamiento paralelo eficiente. Estas t√©cnicas combinadas mantienen la consistencia ACID mientras optimizan el rendimiento en alta concurrencia.",
          source: "Pregunta de fallback exigente generada por IA",
        },
        {
          id: Date.now() + 2,
          question:
            "En el contexto de un algoritmo de machine learning que utiliza ensemble methods con Random Forest, Gradient Boosting y Voting Classifier para predecir riesgo crediticio, ¬øcu√°l es la estrategia m√°s efectiva para prevenir overfitting mientras se maximiza la capacidad predictiva del modelo?",
          options: [
            "Usar √∫nicamente validaci√≥n cruzada k-fold",
            "Implementar regularizaci√≥n L1/L2 en todos los modelos base",
            "Aplicar early stopping solo en Gradient Boosting",
            "Combinar diversidad de modelos con validaci√≥n temporal estratificada",
          ],
          correct: [
            "Combinar diversidad de modelos con validaci√≥n temporal estratificada",
          ],
          suggestedAnswer:
            "Combinar diversidad de modelos con validaci√≥n temporal estratificada es la estrategia m√°s efectiva porque aprovecha las fortalezas complementarias de diferentes algoritmos (Random Forest maneja no-linealidades, Gradient Boosting captura patrones secuenciales), mientras que la validaci√≥n temporal estratificada simula condiciones reales de predicci√≥n financiera respetando la naturaleza temporal de los datos crediticios, previniendo data leakage y proporcionando estimaciones m√°s realistas del rendimiento del modelo.",
          source: "Pregunta de fallback exigente generada por IA",
        },
      ];
    }
  }
}

// Function to evaluate a development question answer with AI
export async function evaluateAnswerWithAI(
  question,
  userAnswer,
  allQuestions,
  customApiKey = null,
  aiConfig = null // Nuevo par√°metro para configuraciones de IA
) {
  try {
    // Use custom API key if provided, otherwise use default
    const effectiveApiKey = customApiKey || DEFAULT_API_KEY;

    apiLog(
      `üéØ Evaluando respuesta con personalidad: ${
        aiConfig?.evaluatorPersonality || "normal"
      }`
    );
    debugLog("Configuraci√≥n evaluaci√≥n:", {
      effectiveApiKey: effectiveApiKey?.substring(0, 8) + "...",
      aiConfig,
    });

    // Create OpenAI client with the appropriate API key
    const openaiClient = createOpenAIClient(effectiveApiKey);

    // Create context from all questions for better interpretation
    const questionsContext = allQuestions
      .map(
        (q, index) =>
          `${index + 1}. ${
            q.question
          }\n   Puntos clave esperados: ${q.correct.join(
            ", "
          )}\n   Respuesta modelo: ${q.suggestedAnswer || "No disponible"}`
      )
      .join("\n\n");

    // Get personality and difficulty settings
    const evaluatorPersonality = aiConfig?.evaluatorPersonality || "normal";
    const difficultyLevel = aiConfig?.difficultyLevel || "normal";

    // Debug logging para confirmar configuraciones
    console.log("üé≠ Configuraciones de evaluaci√≥n recibidas:", {
      evaluatorPersonality,
      difficultyLevel,
      aiConfig,
    });

    // Get personalized system prompt
    const systemPrompt = getEvaluationSystemPrompt(
      evaluatorPersonality,
      difficultyLevel
    );

    // Debug logging para confirmar el prompt personalizado
    console.log("ü§ñ Prompt del sistema generado:", systemPrompt);

    // Create evaluation prompt
    const evaluationPrompt = `CONTEXTO DEL CUESTIONARIO (Material base para todas las preguntas):
${questionsContext}

PREGUNTA ESPEC√çFICA A EVALUAR:
${question.question}

PUNTOS CLAVE ESPERADOS EN LA RESPUESTA (basados en el material):
${question.correct.join(", ")}

RESPUESTA MODELO DE REFERENCIA:
${question.suggestedAnswer || "No disponible"}

RESPUESTA DEL ESTUDIANTE:
"${userAnswer}"

INSTRUCCIONES PARA LA EVALUACI√ìN PERMISIVA:
1. Eval√∫a la respuesta bas√°ndote en el contenido del material proporcionado
2. USA CRITERIOS PERMISIVOS: Si la respuesta est√° RELATIVAMENTE CORRECTA, consid√©rala CORRECTA
3. BENEVOLENTE: Si la respuesta incluye algunos puntos clave del material, consid√©rala CORRECTA
4. NO EXIJAS PERFECCI√ìN: Respuestas parcialmente correctas son CORRECTAS para estad√≠sticas
5. Busca ASPECTOS POSITIVOS en la respuesta antes que errores
6. Si la respuesta demuestra comprensi√≥n b√°sica del tema, clasif√≠cala como CORRECTA
7. SOLO marca como INCORRECTA si la respuesta est√° fundamentalmente equivocada o sin relaci√≥n
8. Prioriza el ESFUERZO y COMPRENSI√ìN GENERAL sobre detalles espec√≠ficos
9. Las respuestas pueden ser menos detalladas que el modelo y a√∫n ser CORRECTAS
10. Enfoque CONSTRUCTIVO: Busca dar feedback positivo y alentador

INSTRUCCI√ìN CRUCIAL SOBRE EL TONO:
- Usa tu personalidad y tono configurado en TODOS los campos de respuesta
- TODOS los textos (analysis, feedback, improvements, correctAnswer) deben reflejar tu personalidad
- Si eres el modo HATER: usa emojis de enojo, sarcasmo y frustraci√≥n en TODAS las respuestas
- Si eres gracioso: incluye humor en TODAS las respuestas
- Si eres motivador: s√© positivo en TODAS las respuestas
- Mant√©n consistencia de personalidad en TODO el JSON de respuesta

FORMATO DE RESPUESTA (JSON):
Responde √öNICAMENTE con un objeto JSON v√°lido en este formato exacto:

{
  "isCorrect": true/false,
  "score": "Correcto/Parcialmente correcto/Incorrecto",
  "analysis": "An√°lisis detallado con tu PERSONALIDAD y TONO espec√≠fico, enfoc√°ndote en aspectos positivos",
  "feedback": "Feedback CONSTRUCTIVO con tu PERSONALIDAD y TONO espec√≠fico, destacando lo bueno de la respuesta",
  "improvements": "Sugerencias de mejora ALENTADORAS con tu PERSONALIDAD y TONO espec√≠fico",
  "correctAnswer": "Respuesta ejemplar con tu PERSONALIDAD y TONO espec√≠fico, basada en el contenido proporcionado"
}

REGLAS ESPEC√çFICAS PARA ESTAD√çSTICAS SIMPLIFICADAS:
- MARCA "isCorrect": true SI la respuesta est√° RELATIVAMENTE correcta, incluye algunos puntos clave, o demuestra comprensi√≥n b√°sica
- MARCA "isCorrect": true SI la respuesta est√° PARCIALMENTE correcta - esto cuenta como CORRECTA en estad√≠sticas
- MARCA "isCorrect": false SOLO si la respuesta est√° completamente equivocada o no tiene relaci√≥n con el tema
- ENFOQUE BENEVOLENTE: En caso de duda, marca como CORRECTA
- Las respuestas "Parcialmente correctas" deben tener "isCorrect": true para simplificar estad√≠sticas

IMPORTANTE:
- Responde SOLO con el JSON, sin texto adicional
- USA CRITERIOS PERMISIVOS para determinar isCorrect
- Basa evaluaci√≥n en comprensi√≥n general del tema, no perfecci√≥n
- La respuesta modelo es referencia, pero NO exijas ese nivel de detalle
- CRUCIAL: Aplica tu personalidad y tono en TODOS los campos del JSON (analysis, feedback, improvements, correctAnswer)
- Si eres HATER: incluye emojis de enojo y sarcasmo en TODOS los campos (pero s√© permisivo con isCorrect)
- Si eres gracioso: incluye humor en TODOS los campos
- Si eres motivador: s√© positivo en TODOS los campos

EJEMPLOS DE EVALUACI√ìN PERMISIVA:
‚úÖ MARCA COMO CORRECTA (isCorrect: true):
- Respuesta que menciona 2-3 puntos clave del material, aunque falte detalle
- Respuesta que demuestra comprensi√≥n general del tema, aunque sea breve
- Respuesta que tiene algunos errores menores pero el concepto principal es correcto
- Respuesta parcialmente desarrollada pero en la direcci√≥n correcta

‚ùå MARCA COMO INCORRECTA (isCorrect: false) SOLO:
- Respuesta completamente fuera del tema
- Respuesta que contradice fundamentalmente el material
- Respuesta vac√≠a o sin sentido
- Respuesta que no demuestra ninguna comprensi√≥n del tema

RECUERDA: En caso de duda, S√â PERMISIVO y marca como CORRECTA`;

    // Get model configuration
    const modelConfig = getModelConfig();

    // Adjust temperature based on personality for more varied responses
    let temperature = 0.3; // Default temperature for consistent evaluation
    if (evaluatorPersonality === "hater") {
      temperature = 0.8; // Higher temperature for more varied and creative hater responses
    } else if (evaluatorPersonality === "funny") {
      temperature = 0.6; // Medium-high temperature for creative humor
    } else if (evaluatorPersonality === "sarcastic") {
      temperature = 0.5; // Medium temperature for witty sarcasm
    }

    // Call OpenAI for evaluation
    const response = await openaiClient.chat.completions.create({
      model: modelConfig.model,
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: evaluationPrompt,
        },
      ],
      max_tokens: modelConfig.max_tokens,
      temperature: temperature, // Use adjusted temperature
    });

    // Parse the evaluation response
    const evaluation = parseEvaluationResponse(
      response.choices[0].message.content
    );

    return evaluation;
  } catch (error) {
    console.error("Error evaluating answer with OpenAI:", error);

    // Specific OpenAI error handling
    if (error.message.includes("API key")) {
      throw new Error("API key de OpenAI inv√°lida. Verifica tu configuraci√≥n.");
    } else if (error.message.includes("quota")) {
      throw new Error("Has excedido tu cuota de OpenAI. Verifica tu cuenta.");
    } else if (error.message.includes("rate limit")) {
      throw new Error(
        "L√≠mite de velocidad excedido. Intenta de nuevo en unos minutos."
      );
    }

    throw new Error(`Error al evaluar respuesta: ${error.message}`);
  }
}

// Function to parse evaluation response from OpenAI
function parseEvaluationResponse(responseContent) {
  try {
    console.log("üîç Raw response de la IA:", responseContent);

    // Clean the response to extract only the JSON
    let jsonString = responseContent.trim();

    // Remove any text before or after the JSON
    const jsonStart = jsonString.indexOf("{");
    const jsonEnd = jsonString.lastIndexOf("}");

    if (jsonStart !== -1 && jsonEnd !== -1) {
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
    }

    console.log("üßπ JSON extra√≠do:", jsonString);

    // Parse JSON
    const evaluation = JSON.parse(jsonString);

    console.log("‚úÖ Evaluaci√≥n parseada:", evaluation);
    console.log(
      "üéØ isCorrect value:",
      evaluation.isCorrect,
      "Type:",
      typeof evaluation.isCorrect
    );

    // Validate required fields
    if (
      !evaluation.hasOwnProperty("isCorrect") ||
      !evaluation.hasOwnProperty("score") ||
      !evaluation.hasOwnProperty("analysis")
    ) {
      throw new Error("Respuesta de evaluaci√≥n incompleta");
    }

    return evaluation;
  } catch (error) {
    console.error("Error parsing evaluation response:", error);
    console.log("Raw response:", responseContent);

    // Fallback evaluation
    return {
      isCorrect: false,
      score: "Evaluaci√≥n no disponible",
      analysis:
        "No se pudo procesar la evaluaci√≥n autom√°tica. La respuesta ha sido registrada.",
      feedback:
        "Por favor revisa tu respuesta con tu profesor para obtener feedback detallado.",
      improvements: "Intenta ser m√°s espec√≠fico y detallado en tu respuesta.",
      correctAnswer:
        "Consulta los materiales de estudio para la respuesta completa.",
    };
  }
}

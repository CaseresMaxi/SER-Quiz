import OpenAI from "openai";
import * as pdfjsLib from "pdfjs-dist";
import {
  AI_CONFIG,
  getSystemPrompt,
  getFormattedInstructions,
  getModelConfig,
  getQuestionsCount,
  getEvaluationSystemPrompt,
} from "./aiSettings";
import {
  ENV_CONFIG,
  debugLog,
  apiLog,
  errorLog,
  isDevelopment,
} from "./environment";
import { diagnosePdfFile, logPdfDiagnosis } from "../utils/pdfDiagnostic";

// Configurar worker de PDF.js para Vite con manejo de errores mejorado
try {
  pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;
  debugLog("‚úÖ PDF.js worker configurado correctamente");
} catch (error) {
  errorLog("‚ùå Error configurando PDF.js worker:", error);
}

// Inicializar cliente de OpenAI con configuraci√≥n de entorno
const DEFAULT_API_KEY = ENV_CONFIG.OPENAI_API_KEY;

// Funci√≥n para crear cliente OpenAI con API key
const createOpenAIClient = (apiKey = null) => {
  const effectiveApiKey = apiKey || DEFAULT_API_KEY;

  if (!effectiveApiKey) {
    errorLog("No se ha configurado una API key de OpenAI");
    throw new Error(
      "API key de OpenAI no configurada. Config√∫rala en el archivo .env o en la interfaz de usuario."
    );
  }

  apiLog(
    "Creando cliente OpenAI con API key:",
    effectiveApiKey.substring(0, 8) + "..."
  );

  return new OpenAI({
    apiKey: effectiveApiKey,
    dangerouslyAllowBrowser: true, // Permite usar en el navegador
  });
};

// Cliente OpenAI por defecto (si hay API key configurada)
export const openai = DEFAULT_API_KEY ? createOpenAIClient() : null;

// Function to generate questions with automatic PDF Assistant detection
export async function generateQuestionsWithSmartDetection(
  files,
  customApiKey = null,
  questionType = "choice",
  aiConfig = null
) {
  // Auto-detect if we should use Assistants for PDFs
  const hasPdfFiles = files.some(
    (file) =>
      file.type === "application/pdf" ||
      file.name.toLowerCase().endsWith(".pdf")
  );

  // Use Assistants API for PDFs by default for better quality and native PDF support
  const useAssistants = hasPdfFiles;

  return await generateQuestionsFromFiles(
    files,
    customApiKey,
    questionType,
    aiConfig,
    useAssistants
  );
}

// Function to generate questions with AI
export async function generateQuestionsFromFiles(
  files,
  customApiKey = null,
  questionType = "choice",
  aiConfig = null, // Nuevo par√°metro para configuraciones de IA
  useAssistants = false // Nuevo par√°metro para usar Assistants API
) {
  try {
    // Use custom API key if provided, otherwise use default
    const effectiveApiKey = customApiKey || DEFAULT_API_KEY;

    apiLog(
      `üöÄ Generando preguntas con ${
        questionType === "development" ? "desarrollo" : "opci√≥n m√∫ltiple"
      } ${useAssistants ? "(usando Assistants API)" : "(m√©todo tradicional)"}`
    );
    debugLog("Configuraci√≥n AI:", {
      effectiveApiKey: effectiveApiKey?.substring(0, 8) + "...",
      questionType,
      aiConfig,
      useAssistants,
    });

    // Create OpenAI client with the appropriate API key
    const openaiClient = createOpenAIClient(effectiveApiKey);

    // Check if we should use Assistants API for PDFs
    const hasPdfFiles = files.some(
      (file) =>
        file.type === "application/pdf" ||
        file.name.toLowerCase().endsWith(".pdf")
    );

    if (useAssistants && hasPdfFiles) {
      // Use new Assistants API flow for PDFs
      return await generateQuestionsWithAssistants(
        files,
        openaiClient,
        questionType,
        aiConfig
      );
    }

    // Original flow for other files or when Assistants is disabled
    // Validate files before processing
    const validFiles = files.filter((file) => {
      if (file.size > AI_CONFIG.maxFileSize) {
        console.warn(
          `Archivo ${file.name} es demasiado grande (${(
            file.size /
            1024 /
            1024
          ).toFixed(1)}MB)`
        );
        return false;
      }
      return true;
    });

    if (validFiles.length === 0) {
      throw new Error("No hay archivos v√°lidos para procesar");
    }

    // Process files and extract content
    const fileContents = await processFiles(validFiles);

    // Validate content quality before sending to API
    const contentValidation = validateContentForAPI(fileContents);

    if (!contentValidation.isValid) {
      // Don't waste API tokens on invalid content
      throw new Error(contentValidation.errorMessage);
    }

    debugLog(
      `‚úÖ Contenido validado para API: ${contentValidation.totalUsableContent} caracteres √∫tiles`
    );

    // Create prompt for question generation based on question type
    const prompt = createQuestionGenerationPrompt(
      fileContents,
      questionType,
      aiConfig
    );

    // Get model configuration
    const modelConfig = getModelConfig();

    // Call OpenAI with the appropriate client
    const response = await openaiClient.chat.completions.create({
      model: modelConfig.model,
      messages: [
        {
          role: "system",
          content: getSystemPrompt(questionType),
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      max_tokens: modelConfig.max_tokens,
      temperature: modelConfig.temperature,
    });

    // Process response and convert to app format
    const questions = parseQuestionsFromResponse(
      response.choices[0].message.content,
      questionType
    );

    return questions;
  } catch (error) {
    console.error("Error generating questions with OpenAI:", error);

    // Specific OpenAI error handling
    if (error.message.includes("API key")) {
      throw new Error("API key de OpenAI inv√°lida. Verifica tu configuraci√≥n.");
    } else if (error.message.includes("quota")) {
      throw new Error("Has excedido tu cuota de OpenAI. Verifica tu cuenta.");
    } else if (error.message.includes("rate limit")) {
      throw new Error(
        "L√≠mite de velocidad excedido. Intenta de nuevo en unos minutos."
      );
    }

    throw new Error(`Error al generar preguntas: ${error.message}`);
  }
}

// Function to generate questions using OpenAI Assistants API
async function generateQuestionsWithAssistants(
  files,
  openaiClient,
  questionType,
  aiConfig
) {
  try {
    apiLog("üì§ Subiendo archivos a OpenAI...");

    // Step 1: Upload files to OpenAI
    const uploadedFiles = [];
    for (const file of files) {
      if (
        file.type === "application/pdf" ||
        file.name.toLowerCase().endsWith(".pdf")
      ) {
        debugLog(`üîÑ Subiendo PDF: ${file.name}`);
        const uploadedFile = await uploadFileToOpenAI(openaiClient, file);
        uploadedFiles.push(uploadedFile);
      } else {
        debugLog(`‚è≠Ô∏è  Saltando archivo no-PDF: ${file.name}`);
        // For non-PDF files, we could still process them traditionally
        // or convert them to text and upload as text files
      }
    }

    if (uploadedFiles.length === 0) {
      throw new Error("No se pudieron subir archivos PDF para procesamiento");
    }

    apiLog(`‚úÖ ${uploadedFiles.length} archivo(s) subido(s) exitosamente`);

    // Step 2: Create or get Assistant
    const assistantId = await createQuestionGeneratorAssistant(
      openaiClient,
      questionType,
      aiConfig
    );

    // Step 3: Create thread and process with Assistant
    const questions = await processFilesWithAssistant(
      openaiClient,
      assistantId,
      uploadedFiles,
      questionType,
      aiConfig
    );

    // Step 4: Clean up uploaded files (optional but recommended)
    await cleanupUploadedFiles(openaiClient, uploadedFiles);

    return questions;
  } catch (error) {
    errorLog("‚ùå Error en generaci√≥n con Assistants:", error);
    throw new Error(`Error usando Assistants API: ${error.message}`);
  }
}

// Function to upload a file to OpenAI
async function uploadFileToOpenAI(openaiClient, file) {
  try {
    debugLog(
      `üì§ Subiendo archivo: ${file.name} (${(file.size / 1024 / 1024).toFixed(
        2
      )}MB)`
    );

    // Check file size limits (512MB max for Assistants)
    const maxSize = 512 * 1024 * 1024; // 512MB
    if (file.size > maxSize) {
      throw new Error(
        `Archivo ${file.name} es demasiado grande (${(
          file.size /
          1024 /
          1024
        ).toFixed(2)}MB). M√°ximo permitido: 512MB`
      );
    }

    // Convert File to the format expected by OpenAI
    const formData = new FormData();
    formData.append("file", file);
    formData.append("purpose", "assistants");

    // Use fetch directly for file upload (OpenAI client doesn't handle FormData well)
    const response = await fetch("https://api.openai.com/v1/files", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${openaiClient.apiKey}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        `Error subiendo archivo: ${response.status} - ${
          errorData.error?.message || "Error desconocido"
        }`
      );
    }

    const uploadResult = await response.json();
    debugLog(`‚úÖ Archivo subido: ${uploadResult.id}`);

    return {
      id: uploadResult.id,
      filename: uploadResult.filename,
      originalFile: file,
    };
  } catch (error) {
    errorLog(`‚ùå Error subiendo archivo ${file.name}:`, error);
    throw error;
  }
}

// Function to create or get a question generator assistant
async function createQuestionGeneratorAssistant(
  openaiClient,
  questionType,
  aiConfig
) {
  try {
    apiLog("ü§ñ Creando Assistant para generaci√≥n de preguntas...");

    const modelConfig = getModelConfig();
    const systemPrompt = getSystemPrompt(questionType);

    const assistant = await openaiClient.beta.assistants.create({
      name: `Generador de Preguntas ${
        questionType === "development" ? "Desarrollo" : "Opci√≥n M√∫ltiple"
      }`,
      instructions: `${systemPrompt}

CONTEXTO ADICIONAL:
Eres un asistente especializado en generar preguntas educativas de alta calidad bas√°ndote en documentos PDF proporcionados por el usuario. Tu objetivo es crear preguntas que eval√∫en la comprensi√≥n profunda del material.

REGLAS ESPEC√çFICAS:
1. Analiza completamente los documentos PDF proporcionados
2. Basa todas las preguntas √öNICAMENTE en el contenido de los documentos
3. NO agregues informaci√≥n externa o conocimiento general
4. Mant√©n el nivel acad√©mico apropiado (universitario)
5. Aseg√∫rate de que las preguntas sean claras y precisas
6. Incluye contexto suficiente en cada pregunta para que sea autocontenida

IMPORTANTE: Siempre responde con formato JSON v√°lido sin texto adicional antes o despu√©s.`,
      model: modelConfig.model,
      tools: [
        { type: "file_search" }, // Enable file search for PDFs
      ],
    });

    debugLog(`‚úÖ Assistant creado: ${assistant.id}`);
    return assistant.id;
  } catch (error) {
    errorLog("‚ùå Error creando Assistant:", error);
    throw new Error(`Error creando Assistant: ${error.message}`);
  }
}

// Function to process files with the Assistant
async function processFilesWithAssistant(
  openaiClient,
  assistantId,
  uploadedFiles,
  questionType,
  aiConfig
) {
  try {
    apiLog("üßµ Creando thread y procesando con Assistant...");

    // Step 1: Create a thread
    const thread = await openaiClient.beta.threads.create();
    debugLog(`‚úÖ Thread creado: ${thread.id}`);

    // Step 2: Create the prompt for question generation
    const fileIds = uploadedFiles.map((f) => f.id);
    const questionsToGenerate = getQuestionsCount(questionType);

    const promptMessage = createAssistantPrompt(
      questionType,
      questionsToGenerate,
      aiConfig
    );

    // Step 3: Add message to thread with file attachments
    await openaiClient.beta.threads.messages.create(thread.id, {
      role: "user",
      content: promptMessage,
      attachments: fileIds.map((fileId) => ({
        file_id: fileId,
        tools: [{ type: "file_search" }],
      })),
    });

    debugLog("üì® Mensaje enviado al Assistant con archivos adjuntos");

    // Step 4: Run the assistant
    const run = await openaiClient.beta.threads.runs.create(thread.id, {
      assistant_id: assistantId,
    });

    debugLog(`üèÉ Run iniciado: ${run.id}`);

    // Step 5: Wait for completion
    let runStatus = run;
    let attempts = 0;
    const maxAttempts = 60; // 5 minutes max

    while (runStatus.status !== "completed" && attempts < maxAttempts) {
      await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait 5 seconds
      runStatus = await openaiClient.beta.threads.runs.retrieve(
        thread.id,
        run.id
      );
      attempts++;

      debugLog(
        `üîÑ Status del run: ${runStatus.status} (${attempts}/${maxAttempts})`
      );

      if (runStatus.status === "failed") {
        throw new Error(
          `Assistant run fall√≥: ${
            runStatus.last_error?.message || "Error desconocido"
          }`
        );
      }

      if (runStatus.status === "requires_action") {
        // Handle any required actions if needed
        debugLog(
          "‚ö†Ô∏è  Run requiere acci√≥n - esto no deber√≠a ocurrir en este flujo"
        );
      }
    }

    if (runStatus.status !== "completed") {
      throw new Error("Timeout: El Assistant tard√≥ demasiado en responder");
    }

    // Step 6: Get the response
    const messages = await openaiClient.beta.threads.messages.list(thread.id);
    const assistantMessage = messages.data.find(
      (msg) => msg.role === "assistant"
    );

    if (!assistantMessage || !assistantMessage.content[0]) {
      throw new Error("No se recibi√≥ respuesta del Assistant");
    }

    const responseContent = assistantMessage.content[0].text.value;
    debugLog("‚úÖ Respuesta recibida del Assistant");

    // Step 7: Parse and return questions
    const questions = parseQuestionsFromResponse(responseContent, questionType);

    // Step 8: Clean up thread
    try {
      await openaiClient.beta.threads.del(thread.id);
      debugLog("üßπ Thread eliminado");
    } catch (cleanupError) {
      debugLog("‚ö†Ô∏è  No se pudo eliminar el thread:", cleanupError.message);
    }

    return questions;
  } catch (error) {
    errorLog("‚ùå Error procesando con Assistant:", error);
    throw error;
  }
}

// Function to create prompt for Assistant
function createAssistantPrompt(questionType, questionsToGenerate, aiConfig) {
  const basePrompt = `Analiza los documentos PDF adjuntos y genera exactamente ${questionsToGenerate} preguntas de ${
    questionType === "development" ? "desarrollo" : "opci√≥n m√∫ltiple"
  } en espa√±ol.

INSTRUCCIONES CR√çTICAS:
1. Basa las preguntas √öNICAMENTE en el contenido de los PDFs adjuntos
2. NO uses conocimiento externo - solo lo que aparece en los documentos
3. Las preguntas deben ser autocontenidas con contexto suficiente
4. Nivel universitario pero basado estrictamente en el material proporcionado
5. Responde √öNICAMENTE con JSON v√°lido sin texto adicional

${
  questionType === "development"
    ? `FORMATO PARA PREGUNTAS DE DESARROLLO:
[
  {
    "question": "Considerando que [contexto del documento], desarrolla y analiza [qu√© se espera]...",
    "options": ["Puntos clave del PDF", "Aspectos del material", "Criterios del documento"],
    "correct": ["Respuestas esperadas del contenido", "Puntos del PDF"],
    "suggestedAnswer": "Respuesta detallada de 200-400 palabras basada exclusivamente en el contenido del PDF",
    "source": "Generado de: nombre_archivo.pdf"
  }
]`
    : `FORMATO PARA PREGUNTAS DE OPCI√ìN M√öLTIPLE:
[
  {
    "question": "En el contexto de [tema del PDF], ¬øcu√°l/c√≥mo/qu√© [pregunta espec√≠fica]?",
    "options": ["Opci√≥n A", "Opci√≥n B", "Opci√≥n C", "Opci√≥n D"],
    "correct": ["Opci√≥n A", "Opci√≥n C"],
    "suggestedAnswer": "Explicaci√≥n de por qu√© estas opciones son correctas seg√∫n el PDF",
    "source": "Generado de: nombre_archivo.pdf"
  }
]`
}

Genera exactamente ${questionsToGenerate} preguntas bas√°ndote exclusivamente en los PDFs adjuntos.`;

  return basePrompt;
}

// Function to clean up uploaded files
async function cleanupUploadedFiles(openaiClient, uploadedFiles) {
  try {
    apiLog("üßπ Limpiando archivos subidos...");

    for (const file of uploadedFiles) {
      try {
        await openaiClient.files.del(file.id);
        debugLog(`üóëÔ∏è  Archivo eliminado: ${file.filename}`);
      } catch (error) {
        debugLog(
          `‚ö†Ô∏è  No se pudo eliminar archivo ${file.filename}:`,
          error.message
        );
      }
    }

    debugLog("‚úÖ Limpieza de archivos completada");
  } catch (error) {
    debugLog("‚ö†Ô∏è  Error en limpieza de archivos:", error.message);
  }
}

// Funci√≥n para procesar archivos y extraer contenido con mejor logging
async function processFiles(files) {
  debugLog(`üìÇ Procesando ${files.length} archivo(s)...`);
  const contents = [];

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    debugLog(
      `üîÑ Procesando archivo ${i + 1}/${files.length}: ${file.name} (${
        file.type
      })`
    );

    try {
      let content = "";

      if (file.type.startsWith("text/")) {
        debugLog(`üìù Procesando archivo de texto: ${file.name}`);
        content = await readTextFile(file);
        debugLog(`‚úÖ Archivo de texto procesado: ${content.length} caracteres`);
      } else if (
        file.type === "application/pdf" ||
        file.name.toLowerCase().endsWith(".pdf")
      ) {
        debugLog(`üìÑ Procesando archivo PDF: ${file.name}`);

        // Diagnosticar PDF antes del procesamiento
        const diagnosis = diagnosePdfFile(file);
        logPdfDiagnosis(diagnosis);

        if (!diagnosis.canProcess) {
          throw new Error(
            `PDF no se puede procesar: ${diagnosis.issues
              .map((i) => i.message)
              .join(", ")}`
          );
        }

        content = await readPdfFile(file);
        debugLog(`‚úÖ PDF procesado: ${content.length} caracteres`);
      } else if (file.type.startsWith("image/")) {
        debugLog(`üñºÔ∏è  Archivo de imagen detectado: ${file.name}`);
        content = `[Imagen: ${file.name} - ${(file.size / 1024).toFixed(
          1
        )}KB]\nNota: El contenido de im√°genes se puede procesar con GPT-4 Vision en futuras versiones.`;
      } else if (
        file.type.includes("csv") ||
        file.name.toLowerCase().endsWith(".csv")
      ) {
        debugLog(`üìä Procesando archivo CSV: ${file.name}`);
        content = await readTextFile(file);
        debugLog(`‚úÖ CSV procesado: ${content.length} caracteres`);
      } else if (file.name.toLowerCase().endsWith(".txt")) {
        debugLog(`üìÑ Procesando archivo TXT: ${file.name}`);
        content = await readTextFile(file);
        debugLog(`‚úÖ TXT procesado: ${content.length} caracteres`);
      } else {
        debugLog(
          `‚ùì Tipo de archivo no reconocido: ${file.name} (${file.type})`
        );
        content = `[Archivo: ${file.name} - ${(file.size / 1024).toFixed(
          1
        )}KB]\nTipo: ${
          file.type
        }\nNota: Contenido no procesable directamente, pero puede contener informaci√≥n relevante.`;
      }

      // Verificar que se extrajo contenido √∫til
      const contentLength = content.trim().length;
      if (contentLength < 10) {
        debugLog(
          `‚ö†Ô∏è  Archivo con muy poco contenido: ${file.name} (${contentLength} caracteres)`
        );
      }

      contents.push({
        filename: file.name,
        type: file.type,
        content: content,
        size: file.size,
        processedSuccessfully: !content.includes("[Error al procesar"),
        contentLength: contentLength,
      });

      debugLog(`üìã Archivo agregado al procesamiento: ${file.name}`);
    } catch (error) {
      errorLog(`‚ùå Error procesando archivo ${file.name}:`, {
        fileName: file.name,
        fileType: file.type,
        fileSize: file.size,
        error: error.message,
      });

      contents.push({
        filename: file.name,
        type: file.type,
        content:
          `[‚ùå Error al procesar archivo: ${file.name}]\n\n` +
          `üîç Detalles del error: ${error.message}\n\n` +
          `üí° Posibles soluciones:\n` +
          `- Verifica que el archivo no est√© corrupto\n` +
          `- Intenta con un archivo m√°s peque√±o\n` +
          `- Verifica el formato del archivo\n` +
          `- Contacta soporte si el problema persiste`,
        size: file.size,
        processedSuccessfully: false,
        contentLength: 0,
      });
    }
  }

  // Resumen del procesamiento
  const successfulFiles = contents.filter(
    (c) => c.processedSuccessfully
  ).length;
  const totalContentLength = contents.reduce(
    (sum, c) => sum + c.contentLength,
    0
  );

  debugLog(`üìä Resumen del procesamiento:`);
  debugLog(
    `  - Archivos procesados exitosamente: ${successfulFiles}/${files.length}`
  );
  debugLog(`  - Contenido total extra√≠do: ${totalContentLength} caracteres`);
  debugLog(`  - Archivos con errores: ${files.length - successfulFiles}`);

  if (successfulFiles === 0) {
    errorLog("‚ùå No se pudo procesar ning√∫n archivo correctamente");
  } else if (totalContentLength < 100) {
    debugLog("‚ö†Ô∏è  Muy poco contenido extra√≠do de los archivos");
  }

  return contents;
}

// Funci√≥n para validar que el contenido es apto para enviar a la API
function validateContentForAPI(fileContents) {
  debugLog("üîç Validando contenido para env√≠o a API...");

  const validation = {
    isValid: false,
    totalUsableContent: 0,
    processedFiles: 0,
    failedFiles: 0,
    issues: [],
    errorMessage: "",
    suggestions: [],
  };

  let usableText = "";
  let hasAnyValidContent = false;

  for (const fileContent of fileContents) {
    debugLog(`üîé Analizando: ${fileContent.filename}`);

    // Verificar si el archivo se proces√≥ exitosamente
    if (!fileContent.processedSuccessfully) {
      validation.failedFiles++;
      validation.issues.push({
        file: fileContent.filename,
        issue: "No se pudo procesar el archivo",
        type: "error",
      });
      continue;
    }

    // Extraer texto √∫til (sin mensajes de error o advertencias)
    const content = fileContent.content;

    // Filtrar contenido que NO es √∫til para la API
    if (
      content.includes("[Error al procesar") ||
      content.includes("[‚ùå Error") ||
      content.includes("[‚ö†Ô∏è  PDF procesado pero con muy poco texto extra√≠ble]")
    ) {
      validation.failedFiles++;
      validation.issues.push({
        file: fileContent.filename,
        issue: "Archivo con errores o sin texto extra√≠ble",
        type: "content_error",
      });

      // Extraer informaci√≥n espec√≠fica del error
      if (content.includes("PDF escaneado")) {
        validation.suggestions.push(
          "El PDF parece ser escaneado - usa un PDF con texto seleccionable o aplica OCR"
        );
      }
      if (content.includes("protegido con contrase√±a")) {
        validation.suggestions.push(
          "El PDF est√° protegido - desbloqu√©alo antes de subirlo"
        );
      }
      if (content.includes("demasiado grande")) {
        validation.suggestions.push(
          "El PDF es demasiado grande - reduce su tama√±o o aumenta VITE_MAX_FILE_SIZE"
        );
      }

      continue;
    }

    // Extraer solo el texto real (sin metadatos de procesamiento)
    let cleanContent = content;

    // Remover metadatos de procesamiento pero conservar el texto real
    cleanContent = cleanContent
      .replace(/\[üìä Resumen:.*?\]/gs, "")
      .replace(/\[üìà Estad√≠sticas:.*?\]/gs, "")
      .replace(/--- P√°gina \d+ ---/g, "")
      .replace(/\[Sin texto extra√≠ble.*?\]/g, "")
      .replace(/\[Nota:.*?\]/g, "")
      .trim();

    if (cleanContent.length > 50) {
      // M√≠nimo 50 caracteres de contenido real
      usableText += cleanContent + "\n\n";
      hasAnyValidContent = true;
      validation.processedFiles++;

      debugLog(
        `‚úÖ ${fileContent.filename}: ${cleanContent.length} caracteres √∫tiles`
      );
    } else {
      validation.failedFiles++;
      validation.issues.push({
        file: fileContent.filename,
        issue: `Muy poco contenido √∫til (${cleanContent.length} caracteres)`,
        type: "insufficient_content",
      });

      validation.suggestions.push(
        `${fileContent.filename}: Verifica que el archivo contenga texto seleccionable`
      );
    }
  }

  validation.totalUsableContent = usableText.trim().length;

  // Determinar si es v√°lido para enviar a la API
  if (!hasAnyValidContent || validation.totalUsableContent < 100) {
    validation.isValid = false;

    // Crear mensaje de error elegante y espec√≠fico
    validation.errorMessage = createUserFriendlyErrorMessage(validation);
  } else {
    validation.isValid = true;
    debugLog(
      `‚úÖ Validaci√≥n exitosa: ${validation.processedFiles} archivos procesados, ${validation.totalUsableContent} caracteres √∫tiles`
    );
  }

  return validation;
}

// Funci√≥n para crear mensaje de error elegante para el usuario
function createUserFriendlyErrorMessage(validation) {
  let message = "üö´ No se puede generar el cuestionario\n\n";

  // T√≠tulo espec√≠fico seg√∫n el problema principal
  if (validation.failedFiles === validation.issues.length) {
    message += "‚ùå No se pudo procesar ning√∫n archivo correctamente.\n\n";
  } else {
    message +=
      "‚ö†Ô∏è  Los archivos no contienen suficiente contenido √∫til para generar preguntas.\n\n";
  }

  // Detalles de problemas encontrados
  message += "üîç PROBLEMAS DETECTADOS:\n";

  const errorsByType = {};
  validation.issues.forEach((issue) => {
    if (!errorsByType[issue.type]) {
      errorsByType[issue.type] = [];
    }
    errorsByType[issue.type].push(issue);
  });

  // Agrupar errores similares
  if (errorsByType.content_error) {
    message += `üìÑ Archivos con problemas de procesamiento: ${errorsByType.content_error.length}\n`;
    errorsByType.content_error.forEach((issue) => {
      message += `   ‚Ä¢ ${issue.file}: ${issue.issue}\n`;
    });
  }

  if (errorsByType.insufficient_content) {
    message += `üìù Archivos con poco contenido: ${errorsByType.insufficient_content.length}\n`;
    errorsByType.insufficient_content.forEach((issue) => {
      message += `   ‚Ä¢ ${issue.file}: ${issue.issue}\n`;
    });
  }

  if (errorsByType.error) {
    message += `üí• Archivos con errores: ${errorsByType.error.length}\n`;
    errorsByType.error.forEach((issue) => {
      message += `   ‚Ä¢ ${issue.file}: ${issue.issue}\n`;
    });
  }

  // Sugerencias espec√≠ficas
  if (validation.suggestions.length > 0) {
    message += "\nüí° SOLUCIONES RECOMENDADAS:\n";
    const uniqueSuggestions = [...new Set(validation.suggestions)];
    uniqueSuggestions.forEach((suggestion) => {
      message += `   ‚Ä¢ ${suggestion}\n`;
    });
  }

  // Sugerencias generales
  message += "\nüõ†Ô∏è  ACCIONES SUGERIDAS:\n";
  message +=
    "   ‚Ä¢ Verifica que los PDFs contengan texto seleccionable (no sean escaneados)\n";
  message +=
    "   ‚Ä¢ Aseg√∫rate de que los archivos no est√©n protegidos con contrase√±a\n";
  message += "   ‚Ä¢ Prueba con archivos m√°s peque√±os (menos de 10MB)\n";
  message += "   ‚Ä¢ Consulta 'PDF_TROUBLESHOOTING.md' para gu√≠a detallada\n";
  message += "   ‚Ä¢ Revisa la consola del navegador (F12) para logs t√©cnicos\n";

  // Informaci√≥n adicional
  message += "\nüìä ESTAD√çSTICAS:\n";
  message += `   ‚Ä¢ Total de archivos: ${
    validation.processedFiles + validation.failedFiles
  }\n`;
  message += `   ‚Ä¢ Archivos procesados: ${validation.processedFiles}\n`;
  message += `   ‚Ä¢ Archivos con errores: ${validation.failedFiles}\n`;
  message += `   ‚Ä¢ Contenido √∫til extra√≠do: ${validation.totalUsableContent} caracteres\n`;

  return message;
}

// Funci√≥n para leer archivos de texto
function readTextFile(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => resolve(e.target.result);
    reader.onerror = (e) => reject(e);
    reader.readAsText(file);
  });
}

// Funci√≥n para leer archivos PDF con manejo de errores mejorado
async function readPdfFile(file) {
  debugLog(
    `üìÑ Procesando PDF: ${file.name} (${(file.size / 1024 / 1024).toFixed(
      2
    )}MB)`
  );

  try {
    // Validaciones previas
    if (!file || file.size === 0) {
      throw new Error("Archivo PDF vac√≠o o inv√°lido");
    }

    if (file.size > ENV_CONFIG.MAX_FILE_SIZE) {
      throw new Error(
        `Archivo demasiado grande: ${(file.size / 1024 / 1024).toFixed(
          2
        )}MB (m√°ximo: ${ENV_CONFIG.MAX_FILE_SIZE / 1024 / 1024}MB)`
      );
    }

    // Verificar que sea realmente un PDF
    if (
      !file.type.includes("pdf") &&
      !file.name.toLowerCase().endsWith(".pdf")
    ) {
      throw new Error("El archivo no parece ser un PDF v√°lido");
    }

    debugLog(`üîÑ Convirtiendo PDF a ArrayBuffer...`);
    const arrayBuffer = await file.arrayBuffer();

    if (!arrayBuffer || arrayBuffer.byteLength === 0) {
      throw new Error("No se pudo leer el contenido del archivo PDF");
    }

    debugLog(`üìñ Cargando documento PDF con PDF.js...`);
    const pdf = await pdfjsLib.getDocument({
      data: arrayBuffer,
      // Configuraciones adicionales para mejor compatibilidad
      verbosity: isDevelopment()
        ? pdfjsLib.VerbosityLevel.WARNINGS
        : pdfjsLib.VerbosityLevel.ERRORS,
      isEvalSupported: false, // Seguridad
      disableFontFace: false, // Permitir fuentes para mejor extracci√≥n
      useSystemFonts: true,
    }).promise;

    if (!pdf) {
      throw new Error("No se pudo cargar el documento PDF");
    }

    let fullText = "";
    const numPages = pdf.numPages;
    debugLog(`üìä PDF cargado: ${numPages} p√°ginas`);

    // Usar configuraci√≥n personalizable para l√≠mite de p√°ginas
    const maxPages = Math.min(numPages, AI_CONFIG.maxPdfPages);
    debugLog(`üî¢ Procesando ${maxPages} de ${numPages} p√°ginas`);

    // Procesar p√°ginas con mejor manejo de errores
    let successfulPages = 0;
    let failedPages = 0;

    for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
      try {
        debugLog(`üìë Procesando p√°gina ${pageNum}/${maxPages}...`);

        const page = await pdf.getPage(pageNum);
        if (!page) {
          errorLog(`‚ùå No se pudo obtener la p√°gina ${pageNum}`);
          failedPages++;
          continue;
        }

        const textContent = await page.getTextContent();
        if (!textContent || !textContent.items) {
          debugLog(`‚ö†Ô∏è  P√°gina ${pageNum} sin contenido de texto extra√≠ble`);
          fullText += `\n--- P√°gina ${pageNum} ---\n[Sin texto extra√≠ble]\n`;
          continue;
        }

        // Extraer texto con mejor formateo
        const pageText = textContent.items
          .map((item) => {
            if (item && item.str) {
              return item.str.trim();
            }
            return "";
          })
          .filter((text) => text.length > 0)
          .join(" ");

        if (pageText.length > 0) {
          fullText += `\n--- P√°gina ${pageNum} ---\n${pageText}\n`;
          successfulPages++;
          debugLog(
            `‚úÖ P√°gina ${pageNum} procesada: ${pageText.length} caracteres`
          );
        } else {
          fullText += `\n--- P√°gina ${pageNum} ---\n[Sin texto extra√≠ble en esta p√°gina]\n`;
          debugLog(`‚ö†Ô∏è  P√°gina ${pageNum} sin texto extra√≠ble`);
        }
      } catch (pageError) {
        errorLog(`‚ùå Error procesando p√°gina ${pageNum}:`, pageError);
        fullText += `\n--- P√°gina ${pageNum} ---\n[Error al procesar p√°gina: ${pageError.message}]\n`;
        failedPages++;
      }
    }

    // Agregar informaci√≥n adicional
    if (numPages > AI_CONFIG.maxPdfPages) {
      fullText += `\n[üìä Resumen: PDF tiene ${numPages} p√°ginas, se procesaron las primeras ${AI_CONFIG.maxPdfPages} p√°ginas]`;
    }

    fullText += `\n[üìà Estad√≠sticas: ${successfulPages} p√°ginas exitosas, ${failedPages} p√°ginas con errores]`;

    // Verificar si se extrajo algo de texto
    const extractedText = fullText.trim();
    if (!extractedText || extractedText.length < 50) {
      const warningMsg =
        `[‚ö†Ô∏è  PDF procesado pero con muy poco texto extra√≠ble: ${file.name}]\n` +
        `Posibles causas:\n` +
        `- PDF escaneado (imagen) sin OCR\n` +
        `- PDF protegido o con restricciones\n` +
        `- PDF con formato complejo\n` +
        `- Fuentes no est√°ndar\n\n` +
        `Texto extra√≠do (${extractedText.length} caracteres):\n${extractedText}`;

      debugLog("‚ö†Ô∏è  PDF con poco texto extra√≠ble:", {
        fileName: file.name,
        extractedLength: extractedText.length,
        successfulPages,
        failedPages,
      });

      return warningMsg;
    }

    debugLog(
      `üéâ PDF procesado exitosamente: ${extractedText.length} caracteres extra√≠dos`
    );
    return extractedText;
  } catch (error) {
    errorLog("‚ùå Error leyendo PDF:", {
      fileName: file.name,
      fileSize: file.size,
      fileType: file.type,
      error: error.message,
      stack: error.stack,
    });

    // Mensajes de error m√°s espec√≠ficos
    let errorMessage = `[‚ùå Error al leer PDF: ${file.name}]\n\n`;

    if (error.message.includes("Invalid PDF")) {
      errorMessage += `üîç Diagn√≥stico: El archivo no es un PDF v√°lido o est√° corrupto.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Verifica que el archivo sea un PDF real\n`;
      errorMessage += `- Intenta abrir el PDF en otro visor para verificar que funciona\n`;
      errorMessage += `- El archivo podr√≠a estar da√±ado\n`;
    } else if (error.message.includes("Password")) {
      errorMessage += `üîí Diagn√≥stico: El PDF est√° protegido con contrase√±a.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Desbloquea el PDF antes de subirlo\n`;
      errorMessage += `- Usa un PDF sin protecci√≥n\n`;
    } else if (error.message.includes("demasiado grande")) {
      errorMessage += `üì¶ Diagn√≥stico: El archivo supera el l√≠mite de tama√±o.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Reduce el tama√±o del PDF\n`;
      errorMessage += `- Divide el PDF en partes m√°s peque√±as\n`;
      errorMessage += `- Aumenta VITE_MAX_FILE_SIZE en tu .env\n`;
    } else if (error.message.includes("Worker")) {
      errorMessage += `‚öôÔ∏è  Diagn√≥stico: Error en el procesador PDF de la aplicaci√≥n.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Recarga la p√°gina e intenta de nuevo\n`;
      errorMessage += `- Verifica tu conexi√≥n a internet\n`;
      errorMessage += `- El archivo podr√≠a tener un formato no compatible\n`;
    } else {
      errorMessage += `üîç Diagn√≥stico: Error t√©cnico durante el procesamiento.\n`;
      errorMessage += `üí° Soluciones:\n`;
      errorMessage += `- Intenta con otro archivo PDF\n`;
      errorMessage += `- Verifica que el PDF se abra correctamente en otros programas\n`;
      errorMessage += `- Contacta soporte si el problema persiste\n`;
    }

    errorMessage += `\nüìã Detalles t√©cnicos: ${error.message}`;

    return errorMessage;
  }
}

// Funci√≥n para crear el prompt de generaci√≥n de preguntas
function createQuestionGenerationPrompt(fileContents, questionType, aiConfig) {
  const filesInfo = fileContents
    .map(
      (f) =>
        `Archivo: ${f.filename}\nTipo: ${f.type}\nTama√±o: ${(
          f.size / 1024
        ).toFixed(1)}KB\nContenido:\n${f.content}`
    )
    .join("\n\n---\n\n");

  if (questionType === "development") {
    // Prompt espec√≠fico para preguntas a desarrollar
    return `Bas√°ndote EXCLUSIVAMENTE en el siguiente contenido de archivos, genera exactamente ${getQuestionsCount(
      "development"
    )} preguntas a desarrollar de nivel universitario avanzado en espa√±ol.

CONTENIDO DE ARCHIVOS:
${filesInfo}

REGLAS CR√çTICAS - DEBES SEGUIRLAS ESTRICTAMENTE:
1. Las preguntas DEBEN estar basadas √öNICAMENTE en el contenido proporcionado
2. NO inventes informaci√≥n que no est√© en los archivos
3. NO agregues conocimiento externo o general del tema
4. Cada pregunta debe ser respondible COMPLETAMENTE con la informaci√≥n proporcionada
5. Si el contenido es limitado, enf√≥cate en an√°lisis profundo de lo que S√ç est√° presente
6. NO hagas referencias a conceptos no mencionados en el material
7. Las preguntas deben ser AUTOCONTENIDAS con CONTEXTO SUFICIENTE para entenderlas
8. NO hagas referencia a "secciones", "tablas" o "figuras" espec√≠ficas del documento
9. INCLUYE en la pregunta el CONTEXTO y TEMA necesario para entender de qu√© se trata
10. Las preguntas deben ser CONCRETAS sobre temas espec√≠ficos pero con contexto claro
11. Lo que se espera responder debe estar CLARAMENTE explicado en la pregunta

CARACTER√çSTICAS DE LAS PREGUNTAS A DESARROLLAR:
- Nivel universitario avanzado pero basado en el contenido real
- Requieren an√°lisis profundo del material proporcionado
- Apropiadas para ex√°menes pero respondibles con el contenido dado
- Deben promover la reflexi√≥n sobre los temas espec√≠ficos del material
- Cada pregunta debe poder responderse en 200-500 palabras usando solo el contenido
- Enf√≥cate en conceptos, relaciones e ideas que aparecen expl√≠citamente en los archivos
- INCLUYE EL CONTEXTO NECESARIO: "Considerando que [contexto del documento], desarrolla y analiza..."
- EVITA REFERENCIAS VAGAS: "seg√∫n la secci√≥n X" o "en la tabla Y"

EJEMPLOS DE PREGUNTAS CON CONTEXTO ADECUADO:
‚úÖ BUENO: "Considerando que en el material se describe un proceso de validaci√≥n que incluye tres etapas espec√≠ficas (verificaci√≥n, an√°lisis y confirmaci√≥n), desarrolla un an√°lisis detallado de cada etapa explicando su funci√≥n y c√≥mo se interrelacionan."
‚ùå MALO: "Seg√∫n la secci√≥n 4, analiza el proceso de validaci√≥n."

‚úÖ BUENO: "Dado que el documento presenta un modelo conceptual donde intervienen factores econ√≥micos, sociales y tecnol√≥gicos en la toma de decisiones, analiza cr√≠ticamente c√≥mo estos factores se integran y cu√°l es su impacto relativo."
‚ùå MALO: "Reflexiona sobre la importancia de los factores en general."

FORMATO DE RESPUESTA (JSON):
Responde √öNICAMENTE con un array JSON v√°lido en este formato exacto:

[
  {
    "question": "Considerando que [contexto espec√≠fico del material], desarrolla y analiza [qu√© se espera como respuesta]...",
    "options": ["Puntos clave del contenido", "Aspectos mencionados en el material", "Criterios basados en el archivo"],
    "correct": ["Puntos esperados basados en el contenido", "Aspectos del material", "Ideas del archivo"],
    "suggestedAnswer": "Respuesta detallada y completa de 200-400 palabras que muestra c√≥mo debe responderse la pregunta usando exclusivamente el contenido proporcionado. Esta respuesta servir√° como referencia para evaluar otras respuestas.",
    "source": "Generado de: nombre_archivo.ext"
  }
]

IMPORTANTE: 
- Responde SOLO con el JSON, sin texto adicional
- Aseg√∫rate de que el JSON sea v√°lido
- Usa comillas dobles para todas las cadenas
- En "options": incluye puntos que aparecen en el material proporcionado
- En "correct": incluye respuestas basadas estrictamente en el contenido dado
- En "suggestedAnswer": proporciona una respuesta modelo completa, detallada y basada 100% en el contenido
- Genera exactamente ${getQuestionsCount("development")} preguntas
- TODA pregunta debe ser verificable contra el contenido proporcionado
- Si menciones un concepto, debe estar presente en los archivos
- NO agregues informaci√≥n externa, por conocida que sea
- CADA PREGUNTA debe incluir el CONTEXTO NECESARIO para entenderla sin consultar el documento
- Las preguntas deben ser AUTOCONTENIDAS y CLARAS sobre qu√© se espera como respuesta`;
  } else {
    // Prompt original para preguntas de opci√≥n m√∫ltiple
    const instructions = getFormattedInstructions("choice");
    const questionsToGenerate = getQuestionsCount("choice");

    return `Bas√°ndote en el siguiente contenido de archivos, genera exactamente ${questionsToGenerate} preguntas de opci√≥n m√∫ltiple en espa√±ol.

CONTENIDO DE ARCHIVOS:
${filesInfo}

REGLAS ESPEC√çFICAS PARA PREGUNTAS AUTOCONTENIDAS:
1. Las preguntas deben ser AUTOCONTENIDAS con CONTEXTO SUFICIENTE para entenderlas
2. NO hagas referencia a "secciones", "tablas" o "figuras" espec√≠ficas del documento
3. INCLUYE en la pregunta el CONTEXTO necesario del tema
4. Las preguntas deben ser CONCRETAS sobre informaci√≥n espec√≠fica del material
5. EVITA preguntas vagas o que requieran consultar el documento para entender el contexto
6. Lo que se pregunta debe estar CLARAMENTE explicado

EJEMPLOS DE PREGUNTAS AUTOCONTENIDAS:
‚úÖ BUENO: "En el contexto de un sistema de gesti√≥n que maneja tres tipos de usuarios (administradores, editores y lectores), ¬øcu√°les son los permisos espec√≠ficos que tienen los editores?"
‚ùå MALO: "¬øCu√°les son los permisos mencionados en la tabla 3?"

‚úÖ BUENO: "Considerando el proceso de autenticaci√≥n que involucra verificaci√≥n biom√©trica y contrase√±a, ¬øcu√°l es el orden correcto de los pasos?"
‚ùå MALO: "¬øCu√°l es el proceso descrito en la secci√≥n 2?"

INSTRUCCIONES ORIGINALES:
${instructions}

FORMATO DE RESPUESTA (JSON):
Responde √öNICAMENTE con un array JSON v√°lido en este formato exacto:

[
  {
    "question": "En el contexto de [tema espec√≠fico del material], ¬øcu√°l/c√≥mo/qu√© [pregunta concreta con contexto incluido]?",
    "options": ["Opci√≥n A", "Opci√≥n B", "Opci√≥n C", "Opci√≥n D"],
    "correct": ["Opci√≥n A", "Opci√≥n C"],
    "suggestedAnswer": "Explicaci√≥n detallada de por qu√© estas opciones son correctas bas√°ndose en el contenido espec√≠fico del material proporcionado.",
    "source": "Generado de: nombre_archivo.ext"
  }
]

IMPORTANTE: 
- Responde SOLO con el JSON, sin texto adicional
- Aseg√∫rate de que el JSON sea v√°lido
- Usa comillas dobles para todas las cadenas
- Las respuestas correctas deben estar exactamente como aparecen en las opciones
- En "suggestedAnswer": proporciona explicaci√≥n clara de por qu√© las opciones marcadas son correctas
- Genera exactamente ${questionsToGenerate} preguntas (m√≠nimo 10)
- Cada pregunta debe tener entre 3-${AI_CONFIG.optionsPerQuestion} opciones
- TODA pregunta debe incluir el CONTEXTO NECESARIO para entenderla sin consultar el documento
- Las preguntas deben ser AUTOCONTENIDAS y CLARAS sobre el tema espec√≠fico
- NO generes preguntas que requieran consultar referencias del documento para entender el contexto`;
  }
}

// Funci√≥n para parsear las preguntas desde la respuesta de OpenAI
function parseQuestionsFromResponse(responseContent, questionType) {
  try {
    // Limpiar la respuesta para extraer solo el JSON
    let jsonString = responseContent.trim();

    // Remover cualquier texto antes o despu√©s del JSON
    const jsonStart = jsonString.indexOf("[");
    const jsonEnd = jsonString.lastIndexOf("]");

    if (jsonStart !== -1 && jsonEnd !== -1) {
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
    }

    // Parsear JSON
    const questions = JSON.parse(jsonString);

    // Validar y agregar IDs
    return questions.map((q, index) => ({
      id: Date.now() + index,
      question: q.question,
      options: q.options,
      correct: q.correct,
      suggestedAnswer: q.suggestedAnswer || "Respuesta sugerida no disponible", // Campo para contexto de IA
      source: q.source || "Generado por IA",
    }));
  } catch (error) {
    console.error("Error parsing questions from OpenAI response:", error);
    console.log("Raw response:", responseContent);

    // Fallback: crear preguntas de ejemplo seg√∫n el tipo
    if (questionType === "development") {
      return [
        {
          id: Date.now(),
          question:
            "Desarrolla un an√°lisis cr√≠tico sobre los conceptos principales presentados en el material. Fundamenta tu respuesta con ejemplos espec√≠ficos y establece relaciones entre las diferentes ideas.",
          options: [
            "Identificaci√≥n de conceptos clave",
            "An√°lisis cr√≠tico y argumentaci√≥n",
            "Uso de ejemplos espec√≠ficos",
            "Establecimiento de relaciones conceptuales",
          ],
          correct: [
            "Demostrar comprensi√≥n profunda de los conceptos principales",
            "Desarrollar argumentos s√≥lidos con evidencia del material",
            "Establecer conexiones l√≥gicas entre ideas",
            "Aplicar pensamiento cr√≠tico en el an√°lisis",
          ],
          suggestedAnswer:
            "Una respuesta completa debe incluir: 1) Identificaci√≥n clara de los conceptos principales presentados en el material, 2) An√°lisis cr√≠tico que eval√∫e la relevancia y aplicabilidad de estos conceptos, 3) Uso de ejemplos espec√≠ficos extra√≠dos del contenido para fundamentar los argumentos, 4) Establecimiento de relaciones l√≥gicas entre las diferentes ideas presentadas, mostrando c√≥mo se conectan y complementan entre s√≠, y 5) Una conclusi√≥n que sintetice el an√°lisis realizado.",
          source: "Pregunta de fallback generada por IA",
        },
        {
          id: Date.now() + 1,
          question:
            "Eval√∫a cr√≠ticamente las metodolog√≠as o enfoques presentados en el contenido. ¬øCu√°les son sus fortalezas y limitaciones? Prop√≥n mejoras o alternativas fundamentadas.",
          options: [
            "Evaluaci√≥n cr√≠tica de metodolog√≠as",
            "Identificaci√≥n de fortalezas y debilidades",
            "Propuesta de mejoras",
            "Fundamentaci√≥n te√≥rica",
          ],
          correct: [
            "An√°lisis objetivo de las metodolog√≠as presentadas",
            "Identificaci√≥n clara de ventajas y desventajas",
            "Propuestas de mejora fundamentadas",
            "Demostraci√≥n de pensamiento cr√≠tico avanzado",
          ],
          suggestedAnswer:
            "La evaluaci√≥n debe comenzar con una descripci√≥n objetiva de las metodolog√≠as presentadas en el material. Luego, analizar sistem√°ticamente sus fortalezas, identificando qu√© aspectos funcionan bien y por qu√©. Seguidamente, examinar las limitaciones o debilidades, explicando los problemas o restricciones encontrados. Finalmente, proponer mejoras espec√≠ficas o alternativas, justificando cada sugerencia con argumentos s√≥lidos basados en el an√°lisis previo y en principios te√≥ricos mencionados en el contenido.",
          source: "Pregunta de fallback generada por IA",
        },
      ];
    } else {
      // Fallback original para preguntas de opci√≥n m√∫ltiple
      return [
        {
          id: Date.now(),
          question:
            "¬øCu√°l de las siguientes es una buena pr√°ctica en programaci√≥n?",
          options: [
            "Escribir c√≥digo sin comentarios",
            "Usar nombres de variables descriptivos",
            "Nunca hacer refactoring",
            "Evitar la documentaci√≥n",
          ],
          correct: ["Usar nombres de variables descriptivos"],
          suggestedAnswer:
            "Usar nombres de variables descriptivos es correcto porque mejora la legibilidad del c√≥digo, facilita el mantenimiento y permite que otros desarrolladores (y uno mismo en el futuro) comprendan r√°pidamente el prop√≥sito de cada variable sin necesidad de comentarios adicionales.",
          source: "Pregunta de fallback generada por IA",
        },
        {
          id: Date.now() + 1,
          question: "¬øQu√© es importante al subir archivos a un sistema?",
          options: [
            "Validar el tipo de archivo",
            "No verificar el tama√±o",
            "Permitir cualquier extensi√≥n",
            "Guardar sin procesamiento",
          ],
          correct: ["Validar el tipo de archivo"],
          suggestedAnswer:
            "Validar el tipo de archivo es fundamental para la seguridad del sistema, ya que previene la subida de archivos maliciosos, asegura que solo se procesen los formatos esperados y protege contra vulnerabilidades de seguridad relacionadas con la ejecuci√≥n de c√≥digo no autorizado.",
          source: "Pregunta de fallback generada por IA",
        },
      ];
    }
  }
}

// Function to evaluate a development question answer with AI
export async function evaluateAnswerWithAI(
  question,
  userAnswer,
  allQuestions,
  customApiKey = null,
  aiConfig = null // Nuevo par√°metro para configuraciones de IA
) {
  try {
    // Use custom API key if provided, otherwise use default
    const effectiveApiKey = customApiKey || DEFAULT_API_KEY;

    apiLog(
      `üéØ Evaluando respuesta con personalidad: ${
        aiConfig?.evaluatorPersonality || "normal"
      }`
    );
    debugLog("Configuraci√≥n evaluaci√≥n:", {
      effectiveApiKey: effectiveApiKey?.substring(0, 8) + "...",
      aiConfig,
    });

    // Create OpenAI client with the appropriate API key
    const openaiClient = createOpenAIClient(effectiveApiKey);

    // Create context from all questions for better interpretation
    const questionsContext = allQuestions
      .map(
        (q, index) =>
          `${index + 1}. ${
            q.question
          }\n   Puntos clave esperados: ${q.correct.join(
            ", "
          )}\n   Respuesta modelo: ${q.suggestedAnswer || "No disponible"}`
      )
      .join("\n\n");

    // Get personality and difficulty settings
    const evaluatorPersonality = aiConfig?.evaluatorPersonality || "normal";
    const difficultyLevel = aiConfig?.difficultyLevel || "normal";

    // Debug logging para confirmar configuraciones
    console.log("üé≠ Configuraciones de evaluaci√≥n recibidas:", {
      evaluatorPersonality,
      difficultyLevel,
      aiConfig,
    });

    // Get personalized system prompt
    const systemPrompt = getEvaluationSystemPrompt(
      evaluatorPersonality,
      difficultyLevel
    );

    // Debug logging para confirmar el prompt personalizado
    console.log("ü§ñ Prompt del sistema generado:", systemPrompt);

    // Create evaluation prompt
    const evaluationPrompt = `CONTEXTO DEL CUESTIONARIO (Material base para todas las preguntas):
${questionsContext}

PREGUNTA ESPEC√çFICA A EVALUAR:
${question.question}

PUNTOS CLAVE ESPERADOS EN LA RESPUESTA (basados en el material):
${question.correct.join(", ")}

RESPUESTA MODELO DE REFERENCIA:
${question.suggestedAnswer || "No disponible"}

RESPUESTA DEL ESTUDIANTE:
"${userAnswer}"

INSTRUCCIONES PARA LA EVALUACI√ìN:
1. Eval√∫a la respuesta √öNICAMENTE bas√°ndote en el contenido del material proporcionado
2. Usa la respuesta modelo como referencia de calidad y estructura esperada
3. Compara la respuesta del estudiante con la respuesta modelo y los puntos clave
4. Verifica si la respuesta del estudiante est√° alineada con la informaci√≥n del material
5. NO uses conocimiento externo para evaluar - solo el contenido dado
6. S√© muy espec√≠fico con tu an√°lisis, citando el material cuando sea relevante
7. Usa el contexto de todas las preguntas para interpretar mejor la respuesta
8. Proporciona feedback basado estrictamente en lo que aparece en el material
9. Si la respuesta va m√°s all√° del material, menciona que debe ce√±irse al contenido
10. Si hay errores respecto al material, corr√≠gelos citando el contenido correcto

INSTRUCCI√ìN CRUCIAL SOBRE EL TONO:
- Usa tu personalidad y tono configurado en TODOS los campos de respuesta
- TODOS los textos (analysis, feedback, improvements, correctAnswer) deben reflejar tu personalidad
- Si eres el modo HATER: usa emojis de enojo, sarcasmo y frustraci√≥n en TODAS las respuestas
- Si eres gracioso: incluye humor en TODAS las respuestas
- Si eres motivador: s√© positivo en TODAS las respuestas
- Mant√©n consistencia de personalidad en TODO el JSON de respuesta

FORMATO DE RESPUESTA (JSON):
Responde √öNICAMENTE con un objeto JSON v√°lido en este formato exacto:

{
  "isCorrect": true/false,
  "score": "Correcto/Parcialmente correcto/Incorrecto",
  "analysis": "An√°lisis detallado con tu PERSONALIDAD y TONO espec√≠fico, comparando la respuesta con el material proporcionado",
  "feedback": "Feedback con tu PERSONALIDAD y TONO espec√≠fico, basado en el contenido del material",
  "improvements": "Sugerencias de mejora con tu PERSONALIDAD y TONO espec√≠fico, usando √∫nicamente el material disponible",
  "correctAnswer": "Respuesta ejemplar con tu PERSONALIDAD y TONO espec√≠fico, basada en el contenido proporcionado"
}

IMPORTANTE:
- Responde SOLO con el JSON, sin texto adicional
- Basa toda evaluaci√≥n en el material proporcionado y la respuesta modelo
- No introduzcas informaci√≥n externa
- Cita o referencie el material y la respuesta modelo cuando sea √∫til
- La respuesta modelo te da el est√°ndar de calidad esperado
- CRUCIAL: Aplica tu personalidad y tono en TODOS los campos del JSON (analysis, feedback, improvements, correctAnswer)
- Si eres HATER: incluye emojis de enojo y sarcasmo en TODOS los campos
- Si eres gracioso: incluye humor en TODOS los campos
- Si eres motivador: s√© positivo en TODOS los campos`;

    // Get model configuration
    const modelConfig = getModelConfig();

    // Call OpenAI for evaluation
    const response = await openaiClient.chat.completions.create({
      model: modelConfig.model,
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: evaluationPrompt,
        },
      ],
      max_tokens: modelConfig.max_tokens,
      temperature: 0.3, // Lower temperature for more consistent evaluation
    });

    // Parse the evaluation response
    const evaluation = parseEvaluationResponse(
      response.choices[0].message.content
    );

    return evaluation;
  } catch (error) {
    console.error("Error evaluating answer with OpenAI:", error);

    // Specific OpenAI error handling
    if (error.message.includes("API key")) {
      throw new Error("API key de OpenAI inv√°lida. Verifica tu configuraci√≥n.");
    } else if (error.message.includes("quota")) {
      throw new Error("Has excedido tu cuota de OpenAI. Verifica tu cuenta.");
    } else if (error.message.includes("rate limit")) {
      throw new Error(
        "L√≠mite de velocidad excedido. Intenta de nuevo en unos minutos."
      );
    }

    throw new Error(`Error al evaluar respuesta: ${error.message}`);
  }
}

// Function to parse evaluation response from OpenAI
function parseEvaluationResponse(responseContent) {
  try {
    // Clean the response to extract only the JSON
    let jsonString = responseContent.trim();

    // Remove any text before or after the JSON
    const jsonStart = jsonString.indexOf("{");
    const jsonEnd = jsonString.lastIndexOf("}");

    if (jsonStart !== -1 && jsonEnd !== -1) {
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
    }

    // Parse JSON
    const evaluation = JSON.parse(jsonString);

    // Validate required fields
    if (
      !evaluation.hasOwnProperty("isCorrect") ||
      !evaluation.hasOwnProperty("score") ||
      !evaluation.hasOwnProperty("analysis")
    ) {
      throw new Error("Respuesta de evaluaci√≥n incompleta");
    }

    return evaluation;
  } catch (error) {
    console.error("Error parsing evaluation response:", error);
    console.log("Raw response:", responseContent);

    // Fallback evaluation
    return {
      isCorrect: false,
      score: "Evaluaci√≥n no disponible",
      analysis:
        "No se pudo procesar la evaluaci√≥n autom√°tica. La respuesta ha sido registrada.",
      feedback:
        "Por favor revisa tu respuesta con tu profesor para obtener feedback detallado.",
      improvements: "Intenta ser m√°s espec√≠fico y detallado en tu respuesta.",
      correctAnswer:
        "Consulta los materiales de estudio para la respuesta completa.",
    };
  }
}

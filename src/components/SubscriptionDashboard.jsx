import React from "react";
import { useSubscription } from "../hooks/useSubscription";
import "./SubscriptionDashboard.css";

const SubscriptionDashboard = () => {
  const {
    subscription,
    paymentHistory,
    hasActiveSubscription,
    getDaysRemaining,
    getSubscriptionStatus,
    isExpiringSoon,
    cancelSubscription,
    reactivateSubscription,
    loading,
  } = useSubscription();

  if (loading) {
    return (
      <div className="subscription-dashboard">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Cargando informaci√≥n de suscripci√≥n...</p>
        </div>
      </div>
    );
  }

  if (!subscription) {
    return (
      <div className="subscription-dashboard">
        <div className="no-subscription">
          <div className="no-sub-icon">üìã</div>
          <h3>Sin Suscripci√≥n Activa</h3>
          <p>
            No tienes ninguna suscripci√≥n actualmente. ¬°Upgrade para acceder a
            todas las funcionalidades premium!
          </p>
        </div>
      </div>
    );
  }

  const status = getSubscriptionStatus();
  const daysRemaining = getDaysRemaining();
  const isActive = hasActiveSubscription();

  const handleCancelSubscription = async () => {
    if (window.confirm("¬øEst√°s seguro que quieres cancelar tu suscripci√≥n?")) {
      const result = await cancelSubscription();
      if (result.success) {
        alert("Suscripci√≥n cancelada exitosamente");
      } else {
        alert("Error al cancelar la suscripci√≥n");
      }
    }
  };

  const handleReactivateSubscription = async () => {
    const result = await reactivateSubscription();
    if (result.success) {
      alert("Suscripci√≥n reactivada exitosamente");
    } else {
      alert("Error al reactivar la suscripci√≥n");
    }
  };

  const getStatusBadge = () => {
    switch (status) {
      case "active":
        return <span className="status-badge active">‚úÖ Activa</span>;
      case "expiring":
        return <span className="status-badge expiring">‚ö†Ô∏è Por Vencer</span>;
      case "expired":
        return <span className="status-badge expired">‚ùå Expirada</span>;
      default:
        return <span className="status-badge inactive">‚è∏Ô∏è Inactiva</span>;
    }
  };

  const formatDate = (date) => {
    return date
      ? new Intl.DateTimeFormat("es-AR", {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        }).format(date)
      : "N/A";
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat("es-AR", {
      style: "currency",
      currency: "ARS",
    }).format(price);
  };

  return (
    <div className="subscription-dashboard">
      <div className="dashboard-header">
        <h2>üî• Mi Suscripci√≥n</h2>
        <p>Gestiona tu plan y revisa tu historial de pagos</p>
      </div>

      {/* Current Subscription Card */}
      <div className="subscription-card">
        <div className="subscription-header">
          <div className="plan-info">
            <h3 className="plan-name">{subscription.planName}</h3>
            {getStatusBadge()}
          </div>
          <div className="plan-price">{formatPrice(subscription.price)}</div>
        </div>

        <div className="subscription-details">
          <div className="detail-item">
            <span className="detail-label">üìÖ Inicio:</span>
            <span className="detail-value">
              {formatDate(subscription.createdAt)}
            </span>
          </div>
          <div className="detail-item">
            <span className="detail-label">‚è∞ Vence:</span>
            <span className="detail-value">
              {formatDate(subscription.expiresAt)}
            </span>
          </div>
          <div className="detail-item">
            <span className="detail-label">‚è≥ D√≠as restantes:</span>
            <span
              className={`detail-value ${isExpiringSoon() ? "expiring" : ""}`}
            >
              {isActive ? `${daysRemaining} d√≠as` : "0 d√≠as"}
            </span>
          </div>
          <div className="detail-item">
            <span className="detail-label">üîÑ Renovaci√≥n:</span>
            <span className="detail-value">
              {subscription.autoRenew ? "Autom√°tica" : "Manual"}
            </span>
          </div>
        </div>

        {/* Subscription Actions */}
        <div className="subscription-actions">
          {isActive && subscription.status === "active" && (
            <button
              className="btn btn-cancel"
              onClick={handleCancelSubscription}
            >
              Cancelar Suscripci√≥n
            </button>
          )}
          {subscription.status === "cancelled" && (
            <button
              className="btn btn-reactivate"
              onClick={handleReactivateSubscription}
            >
              Reactivar Suscripci√≥n
            </button>
          )}
        </div>

        {/* Features List */}
        <div className="features-section">
          <h4>‚ú® Caracter√≠sticas de tu Plan:</h4>
          <ul className="features-list">
            {subscription.features?.map((feature, index) => (
              <li key={index} className="feature-item">
                <span className="feature-check">‚úì</span>
                {feature}
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* Payment History */}
      <div className="payment-history">
        <h3>üí≥ Historial de Pagos</h3>
        {paymentHistory.length === 0 ? (
          <div className="no-payments">
            <p>No hay pagos registrados a√∫n.</p>
          </div>
        ) : (
          <div className="payments-list">
            {paymentHistory.map((payment) => (
              <div key={payment.id} className="payment-item">
                <div className="payment-info">
                  <div className="payment-plan">{payment.planName}</div>
                  <div className="payment-date">
                    {formatDate(payment.createdAt)}
                  </div>
                </div>
                <div className="payment-amount">
                  {formatPrice(payment.amount)}
                </div>
                <div className={`payment-status ${payment.status}`}>
                  {payment.status === "completed"
                    ? "‚úÖ Completado"
                    : payment.status === "pending"
                    ? "‚è≥ Pendiente"
                    : "‚ùå Fallido"}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Expiring Soon Warning */}
      {isExpiringSoon() && (
        <div className="expiring-warning">
          <div className="warning-icon">‚ö†Ô∏è</div>
          <div className="warning-content">
            <h4>Tu suscripci√≥n est√° por vencer</h4>
            <p>
              Te quedan {daysRemaining} d√≠as. ¬°Renueva ahora para no perder el
              acceso!
            </p>
            <button className="btn btn-renew">Renovar Suscripci√≥n</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default SubscriptionDashboard;
